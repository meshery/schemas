// Package selector provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package selector

import (
	"github.com/gofrs/uuid"
	"github.com/meshery/schemas/models/v1beta1/model"
)

// Defines values for PatchStrategy.
const (
	Add       PatchStrategy = "add"
	Copy      PatchStrategy = "copy"
	Merge     PatchStrategy = "merge"
	Move      PatchStrategy = "move"
	Remove    PatchStrategy = "remove"
	Strategic PatchStrategy = "strategic"
	Test      PatchStrategy = "test"
)

// Match defines model for Match.
type Match struct {
	// From Type is array so that multiple bindings can be supported between 2 nodes
	From *MatchSelector `json:"from,omitempty" yaml:"from,omitempty"`

	// Refs Array of string arrays representing JSON paths
	Refs *[][]string `json:"refs,omitempty" yaml:"refs,omitempty"`

	// To Type is array so that multiple bindings can be supported between 2 nodes
	To *MatchSelector `json:"to,omitempty" yaml:"to,omitempty"`
}

// MatchSelector Type is array so that multiple bindings can be supported between 2 nodes
type MatchSelector = []MatchSelectorItem

// MatchSelectorItem defines model for MatchSelectorItem.
type MatchSelectorItem struct {
	Id   uuid.UUID `db:"id" json:"id" yaml:"id"`
	Kind *string   `json:"kind,omitempty" yaml:"kind,omitempty"`

	// MutatedRef JSONPath to property to be patched.
	MutatedRef *MutatedRef `json:"mutatedRef,omitempty" yaml:"mutatedRef,omitempty"`

	// MutatorRef JSON ref to value from where patch should be applied. The sequence of mutatorRef and mutatedRef must match.
	MutatorRef *MutatorRef `json:"mutatorRef,omitempty" yaml:"mutatorRef,omitempty"`
}

// ModelDefinition Name of the model implicated by this selector
type ModelDefinition = model.ModelDefinition

// MutatedRef JSONPath to property to be patched.
type MutatedRef = [][]string

// MutatorRef JSON ref to value from where patch should be applied. The sequence of mutatorRef and mutatedRef must match.
type MutatorRef = [][]string

// Patch defines model for Patch.
type Patch struct {
	// MutatedRef JSONPath to property to be patched.
	MutatedRef *MutatedRef `json:"mutatedRef,omitempty" yaml:"mutatedRef,omitempty"`

	// MutatorRef JSON ref to value from where patch should be applied. The sequence of mutatorRef and mutatedRef must match.
	MutatorRef *MutatorRef `json:"mutatorRef,omitempty" yaml:"mutatorRef,omitempty"`

	// PatchStrategy patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
	PatchStrategy *PatchStrategy `json:"patchStrategy,omitempty" yaml:"patchStrategy,omitempty"`
}

// PatchStrategy patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
type PatchStrategy string

// Selector Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
type Selector = []SelectorItem

// SelectorDefinition Reusable relationships selectors schema elements
type SelectorDefinition struct {
	MatchSelector *MatchSelector `json:"matchSelector,omitempty" yaml:"matchSelector,omitempty"`

	// Selector Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
	Selector *Selector `json:"selector,omitempty" yaml:"selector,omitempty"`

	// Selectors Selectors are organized as an array, with each item containing a distinct set of selectors that share a common functionality. This structure allows for flexibility in defining relationships, even when different components are involved.
	Selectors *Selectors `json:"selectors,omitempty" yaml:"selectors,omitempty"`
}

// SelectorItem Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning.
type SelectorItem struct {
	Id    uuid.UUID `db:"id" json:"id" yaml:"id"`
	Kind  *string   `json:"kind,omitempty" yaml:"kind,omitempty"`
	Match *Match    `json:"match,omitempty" yaml:"match,omitempty"`

	// Model Name of the model implicated by this selector
	Model *model.ModelDefinition `json:"model,omitempty" yaml:"model,omitempty"`
	Patch *Patch                 `json:"patch,omitempty" yaml:"patch,omitempty"`
}

// SelectorPair defines model for SelectorPair.
type SelectorPair struct {
	// From Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
	From Selector `json:"from" yaml:"from"`

	// To Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
	To Selector `json:"to" yaml:"to"`
}

// Selectors Selectors are organized as an array, with each item containing a distinct set of selectors that share a common functionality.
type Selectors = []SelectorsItem

// SelectorsItem Optional selectors used to match Components. Absence of a selector means that it is applied to all Components.
type SelectorsItem struct {
	// Allow Selectors used to define relationships which are allowed.
	Allow SelectorPair `json:"allow" yaml:"allow"`

	// Deny Optional selectors used to define relationships which should not be created / is restricted.
	Deny *SelectorPair `json:"deny,omitempty" yaml:"deny,omitempty"`
}

// StringArrayArray Array of string arrays representing JSON paths
type StringArrayArray = [][]string
