// Package evaluation provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package evaluation

import (
	"time"

	"github.com/meshery/schemas/models/v1beta1/pattern"
)

// Defines values for ActionOp.
const (
	ActionOpAddComponent                 ActionOp = "add_component"
	ActionOpAddRelationship              ActionOp = "add_relationship"
	ActionOpDeleteComponent              ActionOp = "delete_component"
	ActionOpDeleteRelationship           ActionOp = "delete_relationship"
	ActionOpUpdateComponent              ActionOp = "update_component"
	ActionOpUpdateComponentConfiguration ActionOp = "update_component_configuration"
	ActionOpUpdateRelationship           ActionOp = "update_relationship"
)

// Defines values for AddComponentOpOp.
const (
	AddComponentOpOpAddComponent AddComponentOpOp = "add_component"
)

// Defines values for AddRelationshipOpOp.
const (
	AddRelationship AddRelationshipOpOp = "add_relationship"
)

// Defines values for DeleteComponentOpOp.
const (
	DeleteComponent DeleteComponentOpOp = "delete_component"
)

// Defines values for DeleteRelationshipOpOp.
const (
	DeleteRelationship DeleteRelationshipOpOp = "delete_relationship"
)

// Defines values for UpdateComponentConfigurationOpOp.
const (
	UpdateComponentConfiguration UpdateComponentConfigurationOpOp = "update_component_configuration"
)

// Defines values for UpdateComponentConfigurationOpValueMode.
const (
	UpdateComponentConfigurationOpValueModeMerge   UpdateComponentConfigurationOpValueMode = "merge"
	UpdateComponentConfigurationOpValueModeReplace UpdateComponentConfigurationOpValueMode = "replace"
)

// Defines values for UpdateComponentOpOp.
const (
	UpdateComponent UpdateComponentOpOp = "update_component"
)

// Defines values for UpdateComponentOpValueMode.
const (
	UpdateComponentOpValueModeMerge   UpdateComponentOpValueMode = "merge"
	UpdateComponentOpValueModeReplace UpdateComponentOpValueMode = "replace"
)

// Defines values for UpdateRelationshipOpOp.
const (
	UpdateRelationship UpdateRelationshipOpOp = "update_relationship"
)

// Action defines model for Action.
type Action struct {
	Op    ActionOp               `json:"op" yaml:"op"`
	Value map[string]interface{} `json:"value" yaml:"value"`
}

// ActionOp defines model for Action.Op.
type ActionOp string

// AddComponentOp defines model for AddComponentOp.
type AddComponentOp struct {
	Op    *AddComponentOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Item map[string]interface{} `json:"item" yaml:"item"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// AddComponentOpOp defines model for AddComponentOp.Op.
type AddComponentOpOp string

// AddRelationshipOp defines model for AddRelationshipOp.
type AddRelationshipOp struct {
	Op    *AddRelationshipOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Item map[string]interface{} `json:"item" yaml:"item"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// AddRelationshipOpOp defines model for AddRelationshipOp.Op.
type AddRelationshipOpOp string

// ComponentDeclaration defines model for ComponentDeclaration.
type ComponentDeclaration map[string]interface{}

// DeleteComponentOp defines model for DeleteComponentOp.
type DeleteComponentOp struct {
	Op    *DeleteComponentOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Id string `json:"id" yaml:"id"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// DeleteComponentOpOp defines model for DeleteComponentOp.Op.
type DeleteComponentOpOp string

// DeleteRelationshipOp defines model for DeleteRelationshipOp.
type DeleteRelationshipOp struct {
	Op    *DeleteRelationshipOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Id string `json:"id" yaml:"id"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// DeleteRelationshipOpOp defines model for DeleteRelationshipOp.Op.
type DeleteRelationshipOpOp string

// EvaluationRequest defines model for EvaluationRequest.
type EvaluationRequest struct {
	// Design Designs are your primary tool for collaborative authorship of your infrastructure, workflow, and processes.
	Design  pattern.PatternFile `json:"design" yaml:"design"`
	Options *struct {
		// EnableTrace If true, include detailed trace information in the response
		EnableTrace *bool `json:"enableTrace,omitempty" yaml:"enableTrace,omitempty"`

		// ReturnDiffOnly If true, only return the diff of changes instead of the complete updated design
		ReturnDiffOnly *bool `json:"returnDiffOnly,omitempty" yaml:"returnDiffOnly,omitempty"`
	} `json:"options,omitempty" yaml:"options,omitempty"`
}

// EvaluationResponse Schema for the response of a relationship evaluation process in Meshery
type EvaluationResponse struct {
	Actions []interface{} `json:"actions" yaml:"actions"`

	// Design The final evaluated design, including all updated components and relationships. This can be either the complete updated design or only a diff of changes. The version of the design will be automatically incremented if any modifications are made during the evaluation process. This field provides a comprehensive view of the design state after all relationship evaluations and policy applications have been completed.
	Design pattern.PatternFile `json:"design" yaml:"design"`

	// EvaluationHash Hash of the input parameters and configuration used for this evaluation. Useful for identifying duplicate evaluations or caching results.
	EvaluationHash *string `json:"evaluationHash,omitempty" yaml:"evaluationHash,omitempty"`

	// SchemaVersion Specifies the version of the schema to which the evaluation response conforms.
	SchemaVersion string `json:"schemaVersion" yaml:"schemaVersion"`

	// Timestamp ISO 8601 formatted timestamp of when the evaluation was completed.
	Timestamp *time.Time `json:"timestamp,omitempty" yaml:"timestamp,omitempty"`
}

// RelationshipDeclaration defines model for RelationshipDeclaration.
type RelationshipDeclaration map[string]interface{}

// UpdateComponentConfigurationOp defines model for UpdateComponentConfigurationOp.
type UpdateComponentConfigurationOp struct {
	Op    *UpdateComponentConfigurationOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Id    string                                   `json:"id" yaml:"id"`
		Mode  *UpdateComponentConfigurationOpValueMode `json:"mode,omitempty" yaml:"mode,omitempty"`
		Path  []string                                 `json:"path" yaml:"path"`
		Value interface{}                              `json:"value" yaml:"value"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// UpdateComponentConfigurationOpOp defines model for UpdateComponentConfigurationOp.Op.
type UpdateComponentConfigurationOpOp string

// UpdateComponentConfigurationOpValueMode defines model for UpdateComponentConfigurationOp.Value.Mode.
type UpdateComponentConfigurationOpValueMode string

// UpdateComponentOp defines model for UpdateComponentOp.
type UpdateComponentOp struct {
	Op    *UpdateComponentOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Id    string                      `json:"id" yaml:"id"`
		Mode  *UpdateComponentOpValueMode `json:"mode,omitempty" yaml:"mode,omitempty"`
		Path  []string                    `json:"path" yaml:"path"`
		Value interface{}                 `json:"value" yaml:"value"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// UpdateComponentOpOp defines model for UpdateComponentOp.Op.
type UpdateComponentOpOp string

// UpdateComponentOpValueMode defines model for UpdateComponentOp.Value.Mode.
type UpdateComponentOpValueMode string

// UpdateRelationshipOp defines model for UpdateRelationshipOp.
type UpdateRelationshipOp struct {
	Op    *UpdateRelationshipOpOp `json:"op,omitempty" yaml:"op,omitempty"`
	Value *struct {
		Id    string      `json:"id" yaml:"id"`
		Path  []string    `json:"path" yaml:"path"`
		Value interface{} `json:"value" yaml:"value"`
	} `json:"value,omitempty" yaml:"value,omitempty"`
}

// UpdateRelationshipOpOp defines model for UpdateRelationshipOp.Op.
type UpdateRelationshipOpOp string
