// Package academy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package academy

import (
	"time"

	"github.com/gofrs/uuid"
	"github.com/meshery/schemas/models/core"
	"github.com/meshery/schemas/models/v1beta1/badge"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AcademyRegistrationStatus.
const (
	Completed  AcademyRegistrationStatus = "completed"
	Failed     AcademyRegistrationStatus = "failed"
	Registered AcademyRegistrationStatus = "registered"
	Withdrawn  AcademyRegistrationStatus = "withdrawn"
)

// Defines values for ContentType.
const (
	ContentTypeCertification ContentType = "certification"
	ContentTypeChallenge     ContentType = "challenge"
	ContentTypeLearningPath  ContentType = "learning-path"
)

// Defines values for Level.
const (
	Advanced     Level = "advanced"
	Beginner     Level = "beginner"
	Intermediate Level = "intermediate"
)

// Defines values for QuestionType.
const (
	QuestionTypeEssay           QuestionType = "essay"
	QuestionTypeMultipleAnswers QuestionType = "multiple-answers"
	QuestionTypeShortAnswer     QuestionType = "short-answer"
	QuestionTypeSingleAnswer    QuestionType = "single-answer"
)

// Defines values for RegisterToAcademyContentRequestContentType.
const (
	RegisterToAcademyContentRequestContentTypeCertification RegisterToAcademyContentRequestContentType = "certification"
	RegisterToAcademyContentRequestContentTypeChallenge     RegisterToAcademyContentRequestContentType = "challenge"
	RegisterToAcademyContentRequestContentTypeLearningPath  RegisterToAcademyContentRequestContentType = "learning-path"
)

// Defines values for Status.
const (
	Archived Status = "archived"
	NotReady Status = "not_ready"
	Ready    Status = "ready"
)

// Defines values for Visibility.
const (
	Private Visibility = "private"
	Public  Visibility = "public"
)

// AcademyCirricula defines model for AcademyCirricula.
type AcademyCirricula struct {
	// CreatedAt When the cirricula item was created
	CreatedAt time.Time `db:"created_at" json:"created_at" yaml:"created_at"`

	// DeletedAt Timestamp when the resource was deleted.
	DeletedAt core.NullTime `db:"deleted_at" json:"deleted_at" yaml:"deleted_at"`

	// ID Id of the cirricula
	ID string `db:"id" json:"id" yaml:"id"`

	// Level Level of the cirricula
	Level Level `db:"level" json:"level" yaml:"level"`

	// Metadata Additional metadata about the cirricula
	Metadata core.Map `db:"metadata" json:"metadata" yaml:"metadata"`

	// OrgId Organization ID that owns this learning path
	OrgId string `db:"org_id" json:"org_id" yaml:"org_id"`

	// Slug slug of the cirricula
	Slug string `json:"slug" yaml:"slug"`

	// Status Status of the cirricula
	Status Status      `db:"status" json:"status" yaml:"status"`
	Type   ContentType `db:"type" json:"type" yaml:"type"`

	// UpdatedAt When the cirricula was last updated
	UpdatedAt core.Time `db:"updated_at" json:"updated_at" yaml:"updated_at"`

	// Visibility Visibility of the cirricula
	Visibility Visibility `db:"visibility" json:"visibility" yaml:"visibility"`
}

// AcademyCirriculaListResponse defines model for AcademyCirriculaListResponse.
type AcademyCirriculaListResponse struct {
	Data []AcademyCirricula `json:"data" yaml:"data"`

	// Total Total number of cirricula
	Total int `json:"total" yaml:"total"`
}

// AcademyCurriculaWithMetrics defines model for AcademyCurriculaWithMetrics.
type AcademyCurriculaWithMetrics struct {
	RegistrationCount float32 `db:"registration_count,omitempty" json:"registration_count,omitempty" yaml:"registration_count,omitempty"`

	// CreatedAt When the cirricula item was created
	CreatedAt time.Time `db:"created_at" json:"created_at" yaml:"created_at"`

	// DeletedAt Timestamp when the resource was deleted.
	DeletedAt core.NullTime `db:"deleted_at" json:"deleted_at" yaml:"deleted_at"`

	// ID Id of the cirricula
	ID string `db:"id" json:"id" yaml:"id"`

	// Level Level of the cirricula
	Level Level `db:"level" json:"level" yaml:"level"`

	// Metadata Additional metadata about the cirricula
	Metadata core.Map `db:"metadata" json:"metadata" yaml:"metadata"`

	// OrgId Organization ID that owns this learning path
	OrgId string `db:"org_id" json:"org_id" yaml:"org_id"`

	// Slug slug of the cirricula
	Slug string `json:"slug" yaml:"slug"`

	// Status Status of the cirricula
	Status Status      `db:"status" json:"status" yaml:"status"`
	Type   ContentType `db:"type" json:"type" yaml:"type"`

	// UpdatedAt When the cirricula was last updated
	UpdatedAt core.Time `db:"updated_at" json:"updated_at" yaml:"updated_at"`

	// Visibility Visibility of the cirricula
	Visibility Visibility `db:"visibility" json:"visibility" yaml:"visibility"`
}

// AcademyCurriculaWithMetricsListResponse defines model for AcademyCurriculaWithMetricsListResponse.
type AcademyCurriculaWithMetricsListResponse struct {
	Data []struct {
		RegistrationCount float32 `db:"registration_count,omitempty" json:"registration_count,omitempty" yaml:"registration_count,omitempty"`

		// CreatedAt When the cirricula item was created
		CreatedAt time.Time `db:"created_at" json:"created_at" yaml:"created_at"`

		// DeletedAt Timestamp when the resource was deleted.
		DeletedAt core.NullTime `db:"deleted_at" json:"deleted_at" yaml:"deleted_at"`

		// ID Id of the cirricula
		ID string `db:"id" json:"id" yaml:"id"`

		// Level Level of the cirricula
		Level Level `db:"level" json:"level" yaml:"level"`

		// Metadata Additional metadata about the cirricula
		Metadata core.Map `db:"metadata" json:"metadata" yaml:"metadata"`

		// OrgId Organization ID that owns this learning path
		OrgId string `db:"org_id" json:"org_id" yaml:"org_id"`

		// Slug slug of the cirricula
		Slug string `json:"slug" yaml:"slug"`

		// Status Status of the cirricula
		Status Status      `db:"status" json:"status" yaml:"status"`
		Type   ContentType `db:"type" json:"type" yaml:"type"`

		// UpdatedAt When the cirricula was last updated
		UpdatedAt core.Time `db:"updated_at" json:"updated_at" yaml:"updated_at"`

		// Visibility Visibility of the cirricula
		Visibility Visibility `db:"visibility" json:"visibility" yaml:"visibility"`
	} `json:"data" yaml:"data"`

	// Total Total number of cirricula
	Total int `json:"total" yaml:"total"`
}

// AcademyRegistration defines model for AcademyRegistration.
type AcademyRegistration struct {
	// Certificate Issued certificate for completing the curricula under registration
	Certificate core.Map `db:"certificate" json:"certificate" yaml:"certificate"`

	// ContentId ID of the course content
	ContentId string `db:"content_id" json:"content_id" yaml:"content_id"`

	// CreatedAt When the registration was created
	CreatedAt time.Time `db:"created_at" json:"created_at" yaml:"created_at"`

	// DeletedAt Timestamp when the resource was deleted.
	DeletedAt time.Time `db:"deleted_at" json:"deleted_at,omitempty" yaml:"deleted_at,omitempty"`

	// ID A Universally Unique Identifier used to uniquely identify entities in Meshery. The UUID core definition is used across different schemas.
	ID uuid.UUID `db:"id" json:"id" yaml:"id"`

	// Metadata Additional metadata about the registration
	Metadata core.Map `db:"metadata" json:"metadata" yaml:"metadata"`

	// OrgId ID of the organization
	OrgId uuid.UUID `db:"org_id" json:"org_id" yaml:"org_id"`

	// Status Status of the user's course registration
	Status AcademyRegistrationStatus `db:"status" json:"status" yaml:"status"`

	// UpdatedAt When the registration was updated
	UpdatedAt time.Time `db:"updated_at" json:"updated_at" yaml:"updated_at"`

	// UserId ID of the user (foreign key to User)
	UserId uuid.UUID `db:"user_id" json:"user_id" yaml:"user_id"`
}

// AcademyRegistrationStatus Status of the user's course registration
type AcademyRegistrationStatus string

// AcademyRegistrationsListResponse defines model for AcademyRegistrationsListResponse.
type AcademyRegistrationsListResponse struct {
	Data []AcademyRegistration `json:"data" yaml:"data"`

	// Total Total number of learning paths
	Total int `json:"total" yaml:"total"`
}

// Certificate defines model for Certificate.
type Certificate struct {
	// Description Description of the certificate
	Description string `json:"description" yaml:"description"`

	// ExpirationDate Date when the certificate expires (optional)
	ExpirationDate *time.Time `json:"expiration_date,omitempty" yaml:"expiration_date,omitempty"`

	// ID Unique identifier for the certificate
	ID string `json:"id" yaml:"id"`

	// IssuedDate Date when the certificate was issued
	IssuedDate time.Time `json:"issued_date" yaml:"issued_date"`

	// IssuingAuthorities List of issuing authorities for the certificate
	IssuingAuthorities []CertificateIssuingAuthority `json:"issuing_authorities" yaml:"issuing_authorities"`

	// OrgId UUID of the organization that issued the certificate
	OrgId uuid.UUID `json:"org_id" yaml:"org_id"`

	// RecipientId ID of the recipient (user) who received the certificate
	RecipientId string `json:"recipient_id" yaml:"recipient_id"`

	// RecipientName Name of the recipient (user) who received the certificate
	RecipientName string `json:"recipient_name" yaml:"recipient_name"`

	// Title Title of the certificate
	Title string `json:"title" yaml:"title"`
}

// CertificateIssuingAuthority defines model for CertificateIssuingAuthority.
type CertificateIssuingAuthority struct {
	// Name Name of the issuing authority
	Name string `json:"name" yaml:"name"`

	// Role Role of the issuing authority
	Role *string `json:"role,omitempty" yaml:"role,omitempty"`

	// SignatureUrl URL to the signature image of the issuing authority should be a publicly accessible URL and transparent PNG or SVG format
	SignatureUrl *string `json:"signature_url,omitempty" yaml:"signature_url,omitempty"`
}

// ChallengeMetadata defines model for ChallengeMetadata.
type ChallengeMetadata = CurriculaMetadata

// ChildNode defines model for ChildNode.
type ChildNode struct {
	// Banner Filename of the banner image, which should be placed in the same directory as the _index.md file
	Banner *string `json:"banner" yaml:"banner"`

	// Children List of child nodes (sub-courses or modules)
	Children *[]ChildNode `json:"children,omitempty" yaml:"children,omitempty"`

	// Description Course description
	Description string `json:"description" yaml:"description"`

	// ID Unique identifier for the course
	ID string `db:"id" json:"id" yaml:"id"`

	// Permalink URL to the course content
	Permalink string `json:"permalink" yaml:"permalink"`

	// Title Title of the course
	Title string `json:"title" yaml:"title"`

	// Type Type of the content (e.g., learning-path, challenge, certification)
	Type *ContentType `json:"type,omitempty" yaml:"type,omitempty"`

	// Weight A numeric value to determine the display order. A smaller number appears first. If not specified, items will be sorted alphabetically by title.
	Weight *float32 `json:"weight,omitempty" yaml:"weight,omitempty"`
}

// CirriculaCurrentItemData defines model for CirriculaCurrentItemData.
type CirriculaCurrentItemData struct {
	ContentType ContentType `json:"content_type" yaml:"content_type"`
	Id          string      `json:"id" yaml:"id"`
	LastOpened  time.Time   `json:"last_opened" yaml:"last_opened"`
}

// CirriculaProgressTracker defines model for CirriculaProgressTracker.
type CirriculaProgressTracker struct {
	Completed core.NullTime `json:"completed" yaml:"completed"`

	// CompletedItems Items that have been completed (map of item IDs to item data)
	CompletedItems map[string]ProgressItemCompleted    `json:"completed_items" yaml:"completed_items"`
	CurrentItem    map[string]CirriculaCurrentItemData `json:"current_item" yaml:"current_item"`
	Grades         map[string]QuizEvaluationResult     `json:"grades" yaml:"grades"`

	// TimeSpent Total time spent in seconds
	TimeSpent int `json:"time_spent" yaml:"time_spent"`
}

// ContentType defines model for ContentType.
type ContentType string

// CurriculaMetadata defines model for CurriculaMetadata.
type CurriculaMetadata struct {
	Badge *badge.Badge `json:"badge,omitempty" yaml:"badge,omitempty"`

	// Banner Filename of the banner image, which should be placed in the same directory as the _index.md file
	Banner      *string      `json:"banner" yaml:"banner"`
	Certificate *Certificate `json:"certificate,omitempty" yaml:"certificate,omitempty"`

	// Children List of children items in the top-level curricula
	Children *[]ChildNode `json:"children,omitempty" yaml:"children,omitempty"`

	// Description Description of the learning path
	Description string `json:"description" yaml:"description"`

	// Permalink Canonical URL for the learning path
	Permalink string `json:"permalink" yaml:"permalink"`

	// Title Title of the learning path
	Title string `json:"title" yaml:"title"`
}

// CurriculaRegistrationsFilter defines model for CurriculaRegistrationsFilter.
type CurriculaRegistrationsFilter struct {
	ContentType []string `json:"content_type" yaml:"content_type"`
	Page        int      `json:"page" yaml:"page"`
	Pagesize    int      `json:"pagesize" yaml:"pagesize"`
	Status      []string `json:"status" yaml:"status"`
}

// CurriculaRegistrationsResponse defines model for CurriculaRegistrationsResponse.
type CurriculaRegistrationsResponse struct {
	Data       []UserRegistration `json:"data" yaml:"data"`
	Page       int                `json:"page" yaml:"page"`
	PageSize   int                `json:"page_size" yaml:"page_size"`
	TotalCount int64              `json:"total_count" yaml:"total_count"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *string `json:"details,omitempty" yaml:"details,omitempty"`
	Error   *string `json:"error,omitempty" yaml:"error,omitempty"`
}

// LearningPathMetadata defines model for LearningPathMetadata.
type LearningPathMetadata = CurriculaMetadata

// Level defines model for Level.
type Level string

// Parent defines model for Parent.
type Parent struct {
	Id           string `json:"id" yaml:"id"`
	RelPermalink string `json:"relPermalink" yaml:"relPermalink"`
	Title        string `json:"title" yaml:"title"`
	Type         string `json:"type" yaml:"type"`
}

// ProgressItemCompleted defines model for ProgressItemCompleted.
type ProgressItemCompleted struct {
	// CompletedAt Timestamp when the item was completed
	CompletedAt time.Time `json:"completed_at" yaml:"completed_at"`
	ItemData    Parent    `json:"item_data" yaml:"item_data"`
}

// Question defines model for Question.
type Question struct {
	CorrectAnswer   string           `json:"correct_answer" yaml:"correct_answer"`
	Id              string           `json:"id" yaml:"id"`
	Marks           int              `json:"marks" yaml:"marks"`
	MultipleAnswers *bool            `json:"multiple_answers,omitempty" yaml:"multiple_answers,omitempty"`
	Options         []QuestionOption `json:"options" yaml:"options"`
	Text            string           `json:"text" yaml:"text"`
	Type            QuestionType     `json:"type" yaml:"type"`
}

// QuestionOption defines model for QuestionOption.
type QuestionOption struct {
	Id        string `json:"id" yaml:"id"`
	IsCorrect bool   `json:"is_correct" yaml:"is_correct"`
	Text      string `json:"text" yaml:"text"`
}

// QuestionType defines model for QuestionType.
type QuestionType string

// Quiz defines model for Quiz.
type Quiz struct {
	Date        openapi_types.Date `json:"date" yaml:"date"`
	Description string             `json:"description" yaml:"description"`
	Draft       bool               `json:"draft" yaml:"draft"`
	FilePath    string             `json:"file_path" yaml:"file_path"`

	// Final Indicates if the quiz is final . i.e this quiz will used to evaluate the completion of parent section eg course , module , learning path
	Final   bool               `json:"final" yaml:"final"`
	ID      string             `json:"id" yaml:"id"`
	Lastmod openapi_types.Date `json:"lastmod" yaml:"lastmod"`
	Layout  string             `json:"layout" yaml:"layout"`

	// OrgId Organization ID that owns this quiz
	OrgId          string     `db:"org_id" json:"org_id" yaml:"org_id"`
	Parent         *Parent    `json:"parent,omitempty" yaml:"parent,omitempty"`
	PassPercentage float32    `json:"pass_percentage" yaml:"pass_percentage"`
	Permalink      string     `json:"permalink" yaml:"permalink"`
	Prerequisites  []Parent   `json:"prerequisites" yaml:"prerequisites"`
	Questions      []Question `json:"questions" yaml:"questions"`
	RelPermalink   string     `json:"relPermalink" yaml:"relPermalink"`
	Section        string     `json:"section" yaml:"section"`
	Slug           string     `json:"slug" yaml:"slug"`
	TimeLimit      string     `json:"time_limit" yaml:"time_limit"`
	Title          string     `json:"title" yaml:"title"`
	TotalMarks     int        `json:"total_marks" yaml:"total_marks"`
	TotalQuestions int        `json:"total_questions" yaml:"total_questions"`
	Type           string     `json:"type" yaml:"type"`
}

// QuizEvaluationResult defines model for QuizEvaluationResult.
type QuizEvaluationResult struct {
	AttemptedAt        time.Time       `json:"attempted_at" yaml:"attempted_at"`
	Attempts           int             `json:"attempts" yaml:"attempts"`
	CorrectSubmissions map[string]bool `json:"correct_submissions" yaml:"correct_submissions"`
	PassPercentage     float32         `json:"pass_percentage" yaml:"pass_percentage"`
	Passed             bool            `json:"passed" yaml:"passed"`
	PercentageScored   float32         `json:"percentage_scored" yaml:"percentage_scored"`
	Quiz               Quiz            `json:"quiz" yaml:"quiz"`
	Score              int             `json:"score" yaml:"score"`
	TotalMarks         int             `json:"total_marks" yaml:"total_marks"`
}

// QuizSubmission defines model for QuizSubmission.
type QuizSubmission struct {
	Answers        []SubmittedAnswer `json:"answers" yaml:"answers"`
	QuizAbsPath    string            `json:"quiz_abs_path" yaml:"quiz_abs_path"`
	RegistrationId string            `json:"registration_id" yaml:"registration_id"`
	UserId         string            `json:"user_id" yaml:"user_id"`
}

// RegisterToAcademyContentRequest defines model for RegisterToAcademyContentRequest.
type RegisterToAcademyContentRequest struct {
	// ContentId ID of the academy content to register for
	ContentId   string                                      `json:"content_id" yaml:"content_id"`
	ContentType *RegisterToAcademyContentRequestContentType `json:"content_type,omitempty" yaml:"content_type,omitempty"`
}

// RegisterToAcademyContentRequestContentType defines model for RegisterToAcademyContentRequest.ContentType.
type RegisterToAcademyContentRequestContentType string

// Status defines model for Status.
type Status string

// SubmittedAnswer defines model for SubmittedAnswer.
type SubmittedAnswer struct {
	AnswerText       string          `json:"answer_text" yaml:"answer_text"`
	QuestionId       string          `json:"question_id" yaml:"question_id"`
	SelectedOptionId map[string]bool `json:"selected_option_id" yaml:"selected_option_id"`
}

// UpdateCurrentItemRequest defines model for UpdateCurrentItemRequest.
type UpdateCurrentItemRequest struct {
	ContentType ContentType              `json:"content_type" yaml:"content_type"`
	ItemData    CirriculaCurrentItemData `json:"item_data" yaml:"item_data"`
}

// UserRegistration defines model for UserRegistration.
type UserRegistration struct {
	// CreatedAt When the registration was created
	CreatedAt *time.Time `db:"created_at" json:"created_at,omitempty" yaml:"created_at,omitempty"`

	// CurriculaPermalink Permalink of the curricula
	CurriculaPermalink string `db:"curricula_permalink" json:"curricula_permalink" yaml:"curricula_permalink"`

	// CurriculaTitle Title of the curricula
	CurriculaTitle string `db:"curricula_title" json:"curricula_title" yaml:"curricula_title"`

	// CurriculaType Type of the curricula
	CurriculaType ContentType `db:"curricula_type" json:"curricula_type" yaml:"curricula_type"`

	// RegistrationId Unique ID of the registration
	RegistrationId openapi_types.UUID `db:"registration_id" json:"registration_id" yaml:"registration_id"`

	// Status Registration status
	Status AcademyRegistrationStatus `db:"status" json:"status" yaml:"status"`

	// TotalCount Total count for pagination
	TotalCount int64 `db:"total_count" json:"total_count" yaml:"total_count"`

	// UserAvatarUrl Avatar URL of the user
	UserAvatarUrl string `db:"user_avatar_url" json:"user_avatar_url" yaml:"user_avatar_url"`

	// UserEmail Email of the user
	UserEmail openapi_types.Email `db:"user_email" json:"user_email" yaml:"user_email"`

	// UserFirstName First name of the user
	UserFirstName string `db:"user_first_name" json:"user_first_name" yaml:"user_first_name"`

	// UserId ID of the user
	UserId openapi_types.UUID `db:"user_id" json:"user_id" yaml:"user_id"`

	// UserLastName Last name of the user
	UserLastName string `db:"user_last_name" json:"user_last_name" yaml:"user_last_name"`
}

// Visibility defines model for Visibility.
type Visibility string
