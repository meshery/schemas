// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package user

import (
	"time"
)

// Adapter Placeholder for Adapter struct definition.
type Adapter = map[string]interface{}

// Grafana defines model for Grafana.
type Grafana struct {
	GrafanaAPIKey         *string `json:"grafanaAPIKey,omitempty" yaml:"grafanaAPIKey,omitempty"`
	GrafanaURL            *string `json:"grafanaURL,omitempty" yaml:"grafanaURL,omitempty"`
	SelectedBoardsConfigs *[]struct {
		// Board Placeholder for GrafanaBoard definition (define fields as needed)
		Board        *map[string]interface{}   `json:"board,omitempty" yaml:"board,omitempty"`
		Panels       *[]map[string]interface{} `json:"panels,omitempty" yaml:"panels,omitempty"`
		TemplateVars *[]string                 `json:"templateVars,omitempty" yaml:"templateVars,omitempty"`
	} `json:"selectedBoardsConfigs,omitempty" yaml:"selectedBoardsConfigs,omitempty"`
}

// GrafanaBoard Placeholder for GrafanaBoard definition (define fields as needed)
type GrafanaBoard = map[string]interface{}

// LoadTestPreferences defines model for LoadTestPreferences.
type LoadTestPreferences struct {
	// C Concurrent requests
	C *int `json:"c,omitempty" yaml:"c,omitempty"`

	// Gen Load generator
	Gen *string `json:"gen,omitempty" yaml:"gen,omitempty"`

	// Qps Queries per second
	Qps *int `json:"qps,omitempty" yaml:"qps,omitempty"`

	// T Duration
	T *string `json:"t,omitempty" yaml:"t,omitempty"`
}

// Panel Grafana panel structure imported from github.com/grafana-tools/sdk
type Panel = map[string]interface{}

// Preference defines model for Preference.
type Preference struct {
	AnonymousPerfResults              bool                    `json:"anonymousPerfResults" yaml:"anonymousPerfResults"`
	AnonymousUsageStats               bool                    `json:"anonymousUsageStats" yaml:"anonymousUsageStats"`
	DashboardPreferences              map[string]interface{}  `json:"dashboardPreferences" yaml:"dashboardPreferences"`
	Grafana                           *Grafana                `json:"grafana,omitempty" yaml:"grafana,omitempty"`
	LoadTestPrefs                     *LoadTestPreferences    `json:"loadTestPrefs,omitempty" yaml:"loadTestPrefs,omitempty"`
	MeshAdapters                      *[]Adapter              `json:"meshAdapters,omitempty" yaml:"meshAdapters,omitempty"`
	Prometheus                        *Prometheus             `json:"prometheus,omitempty" yaml:"prometheus,omitempty"`
	RemoteProviderPreferences         *map[string]interface{} `json:"remoteProviderPreferences,omitempty" yaml:"remoteProviderPreferences,omitempty"`
	SelectedOrganizationID            string                  `json:"selectedOrganizationID" yaml:"selectedOrganizationID"`
	SelectedWorkspaceForOrganizations map[string]string       `json:"selectedWorkspaceForOrganizations" yaml:"selectedWorkspaceForOrganizations"`
	UpdatedAt                         *time.Time              `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	UsersExtensionPreferences         map[string]interface{}  `json:"usersExtensionPreferences" yaml:"usersExtensionPreferences"`
}

// Prometheus defines model for Prometheus.
type Prometheus struct {
	PrometheusURL                   *string `json:"prometheusURL,omitempty" yaml:"prometheusURL,omitempty"`
	SelectedPrometheusBoardsConfigs *[]struct {
		// Board Placeholder for GrafanaBoard definition (define fields as needed)
		Board        *map[string]interface{}   `json:"board,omitempty" yaml:"board,omitempty"`
		Panels       *[]map[string]interface{} `json:"panels,omitempty" yaml:"panels,omitempty"`
		TemplateVars *[]string                 `json:"templateVars,omitempty" yaml:"templateVars,omitempty"`
	} `json:"selectedPrometheusBoardsConfigs,omitempty" yaml:"selectedPrometheusBoardsConfigs,omitempty"`
}

// SelectedGrafanaConfig defines model for SelectedGrafanaConfig.
type SelectedGrafanaConfig struct {
	// Board Placeholder for GrafanaBoard definition (define fields as needed)
	Board        *map[string]interface{}   `json:"board,omitempty" yaml:"board,omitempty"`
	Panels       *[]map[string]interface{} `json:"panels,omitempty" yaml:"panels,omitempty"`
	TemplateVars *[]string                 `json:"templateVars,omitempty" yaml:"templateVars,omitempty"`
}
