{
  "$id": "https://schemas.meshery.io/component.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "description": "Components are reusable building blocks for depicting capabilities defined within models. Learn more at https://docs.meshery.io/concepts/components",
  "additionalProperties": false,
  "type": "object",
  "properties": {
    "id": {
      "description": "Uniquely identifies the entity (i.e. component) as defined in a declaration (i.e. design).",
      "$ref": "../../core.json#/definitions/uuid",
      "x-order": 1,
      "x-oapi-codegen-extra-tags": {
        "yaml": "id",
        "json": "id"
      }
    },
    "schemaVersion": {
      "$ref": "../../core.json#/definitions/versionString",
      "x-order": 2,
      "description": "Specifies the version of the schema to which the component definition conforms.",
      "x-oapi-codegen-extra-tags": {
        "yaml": "schemaVersion",
        "json": "schemaVersion"
      },
      "default": "v1beta1"
    },
    "version": {
      "$ref": "../../core.json#/definitions/semverString",
      "x-order": 3,
      "description": "Version of the component definition.",
      "minLength": 1,
      "maxLength": 50,
      "x-oapi-codegen-extra-tags": {
        "yaml": "version",
        "json": "version"
      }
    },
    "displayName": {
      "$ref": "../../core.json#/definitions/inputString",
      "x-order": 4,
      "description": "Name of the component in human-readible format.",
      "x-oapi-codegen-extra-tags": {
        "yaml": "displayName",
        "json": "displayName"
      }
    },
    "description": {
      "x-order": 5,
      "type": "string",
      "description": "A written representation of the purpose and characteristics of the component.",
      "x-oapi-codegen-extra-tags": {
        "yaml": "description",
        "json": "description"
      }
    },
    "format": {
      "x-order": 6,
      "type": "string",
      "enum": ["JSON", "CUE"],
      "default": "JSON",
      "description": "Format specifies the format used in the `component.schema` field. JSON is the default.",
      "x-oapi-codegen-extra-tags": {
        "yaml": "format",
        "json": "format"
      }
    },
    "model": {
      "$ref": "../model/model.json",
      "x-go-type": "model.ModelDefinition",
      "x-go-type-import": {
        "path": "github.com/meshery/schemas/models/v1beta1/model"
      },
      "x-order": 7,
      "description": "Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models",
      "x-oapi-codegen-extra-tags": {
        "gorm": "foreignKey:ModelId;references:Id"
      }
    },
    "modelId": {
      "$ref": "../../core.json#/definitions/uuid",
      "description": "ModelId is the foreign key to the model to which the component belongs.",
      "x-oapi-codegen-extra-tags": {
        "gorm": "index:idx_component_definition_dbs_model_id,column:model_id",
        "yaml": "-",
        "json": "-"
      }
    },
    "styles": {
      "$ref": "../../v1alpha1/core/openapi.yml#/components/schemas/componentStyles",
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json",
        "yaml": "styles",
        "json": "styles"
      },
      "x-go-type": "core.ComponentStyles",
      "x-go-type-import": {
        "path": "github.com/meshery/schemas/models/v1alpha1/core"
      },
      "x-order": 8
    },
    "capabilities": {
      "x-order": 9,
      "type": "array",
      "description": "Meshery manages components in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. ComponentDefinitions may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshery for full lifecycle management.",
      "items": {
        "$ref": "../../v1alpha1/capability/capability.json",

        "x-go-type": "capability.Capability",
        "x-go-type-import": {
          "path": "github.com/meshery/schemas/models/v1alpha1/capability"
        },
        "default":  [
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Performance Test",
          "description": "Initiate a performance test. Meshery will execute the load generation, collect metrics, and present the results.",
          "kind": "action",
          "type": "operator",
          "subType": "perf-test",
          "key": "",
          "entityState": ["instance"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Workload Configuration",
          "description": "Configure the workload specific setting of a component",
          "kind": "mutate",
          "type": "configuration",
          "subType": "config",
          "key": "",
          "entityState": ["declaration"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Labels and Annotations Configuration",
          "description": "Configure Labels And Annotations for  the component ",
          "kind": "mutate",
          "type": "configuration",
          "subType": "labels-and-annotations",
          "key": "",
          "entityState": ["declaration"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Relationships",
          "description": "View relationships for the component",
          "kind": "view",
          "type": "configuration",
          "subType": "relationship",
          "key": "",
          "entityState": ["declaration", "instance"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Json Schema",
          "description": "View Component Definition ",
          "kind": "view",
          "type": "configuration",
          "subType": "definition",
          "key": "",
          "entityState": ["declaration", "instance"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Styling",
          "description": "Configure the visual styles for the component",
          "kind": "mutate",
          "type": "style",
          "subType": "",
          "key": "",
          "entityState": ["declaration"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Change Shape",
          "description": "Change the shape of the component",
          "kind": "mutate",
          "type": "style",
          "subType": "shape",
          "key": "",
          "entityState": ["declaration"],
          "status": "enabled",
          "metadata": null
        },
        {
          "schemaVersion": "capability.meshery.io/v1alpha1",
          "version": "0.7.0",
          "displayName": "Compound Drag And Drop",
          "description": "Drag and Drop a component into a parent component in graph view",
          "kind": "interaction",
          "type": "graph",
          "subType": "compoundDnd",
          "key": "",
          "entityState": ["declaration"],
          "status": "enabled",
          "metadata": null
        }
      ]
      },
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json",
        "yaml": "capabilities",
        "json": "capabilities"
      }
    },
    "status": {
      "x-order": 10,
      "type": "string",
      "description": "Status of component, including:\n- duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.\n- maintenance: model is unavailable for a period of time.\n- enabled: model is available for use for all users of this Meshery Server.\n- ignored: model is unavailable for use for all users of this Meshery Server.",
      "default": "enabled",
      "enum": ["ignored", "enabled", "duplicate", "resolved", "open"],
      "x-oapi-codegen-extra-tags": {
        "yaml": "status",
        "json": "status"
      }
    },
    "metadata": {
      "x-order": 11,
      "type": "object",
      "description": "Metadata contains additional information associated with the component.",
      "required": [
        "genealogy",
        "isAnnotation",
        "isNamespaced",
        "published",
        "instanceDetails",
        "configurationUISchema"
      ],
      "properties": {
        "genealogy": {
          "x-order": 1,
          "type": "string",
          "description": "Genealogy represents the various representational states of the component."
        },
        "isAnnotation": {
          "x-order": 2,
          "type": "boolean",
          "description": "Identifies whether the component is semantically meaningful or not; identifies whether the component should be treated as deployable entity or is for purposes of logical representation.",
          "default": false
        },
        "isNamespaced": {
          "x-order": 3,
          "type": "boolean",
          "description": "Identifies whether the component is scoped to namespace or clsuter wide."
        },
        "published": {
          "x-order": 4,
          "type": "boolean",
          "description": "'published' controls whether the component should be registered in Meshery Registry. When the same 'published' property in Models, is set to 'false', the Model property takes precedence with all Entities in the Model not being registered."
        },
        "instanceDetails": {
          "x-order": 5,
          "type": "object",
          "description": "InstanceDetails contains information about the instance of the component."
        },

        "configurationUISchema": {
          "x-order": 6,
          "type": "string",
          "description": "Defines the UI schema for rendering the component's configuration. For more details, visit: https://rjsf-team.github.io/react-jsonschema-form/docs/api-reference/uiSchema/ ."
        }
      },
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json"
      },
      "additionalProperties": true
    },
    "configuration": {
      "x-order": 12,
      "description": "The configuration of the component. The configuration is based on the schema defined within the component definition(component.schema).",
      "type": "object",
      "$comment": "The configuration of the component. The configuration is based on the schema defined within the component definition(component.schema).",
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json"
      }
    },
    "component": {
      "x-order": 13,
      "$ref": "./openapi.yml#/components/schemas/Component",
      "x-oapi-codegen-extra-tags": {
        "gorm": "type:bytes;serializer:json"
      },
      "x-go-type": "Component"
    }
  },
  "required": [
    "id",
    "displayName",
    "description",
    "schemaVersion",
    "format",
    "version",
    "configuration",
    "metadata",
    "modelId",
    "model",
    "component"
  ]
}
