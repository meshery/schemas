{
  "$id": "https://schemas.meshery.io/constructs/v1beta1/relationship/selector.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Selector",
  "description": "Defines a selector item for identifying components and their relationships within a Meshery design.",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "allow"
  ],
  "properties": {
    "deny": {
      "description": "Optional selectors used to define relationships which should not be created / is restricted.",
      "type": "object",
      "required": [
        "to",
        "from"
      ],
      "properties": {
        "from": {
          "description": "Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "kind": {
                "type": "string",
                "x-oapi-codegen-extra-tags": {
                  "yaml": "kind",
                  "json": "kind"
                }
              },
              "model": {
                "description": "Model implicated by this selector.",
                "$ref": "../model/model.json",
                "x-go-type": "model.ModelDefinition",
                "x-go-type-import": {
                  "path": "github.com/meshery/schemas/models/v1beta1/model"
                },
                "x-oapi-codegen-extra-tags": {
                  "yaml": "model",
                  "json": "model"
                }
              },
              "id": {
                "description": "UUID of the entity.",
                "$ref": "../../../v1alpha1/core/openapi.yml#/components/schemas/uuid",
                "x-oapi-codegen-extra-tags": {
                  "yaml": "id",
                  "json": "id"
                }
              },
              "match": {
                "type": "object",
                "additionalProperties": false,
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "from": {
                        "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "allOf": [
                            {
                              "properties": {
                                "kind": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string",
                                  "format": "uuid",
                                  "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                  "x-go-type": "uuid.UUID",
                                  "x-go-type-import": {
                                    "path": "github.com/gofrs/uuid"
                                  },
                                  "x-oapi-codegen-extra-tags": {
                                    "yaml": "id",
                                    "json": "id"
                                  }
                                }
                              }
                            },
                            {
                              "oneOf": [
                                {
                                  "properties": {
                                    "mutatorRef": {
                                      "type": "array",
                                      "items": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                      },
                                      "description": "JSON ref to value from where patch should be applied."
                                    }
                                  }
                                },
                                {
                                  "properties": {
                                    "mutatedRef": {
                                      "type": "array",
                                      "items": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "to": {
                        "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "allOf": [
                            {
                              "properties": {
                                "kind": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string",
                                  "format": "uuid",
                                  "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                  "x-go-type": "uuid.UUID",
                                  "x-go-type-import": {
                                    "path": "github.com/gofrs/uuid"
                                  },
                                  "x-oapi-codegen-extra-tags": {
                                    "yaml": "id",
                                    "json": "id"
                                  }
                                }
                              }
                            },
                            {
                              "oneOf": [
                                {
                                  "properties": {
                                    "mutatorRef": {
                                      "type": "array",
                                      "items": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                      },
                                      "description": "JSON ref to value from where patch should be applied."
                                    }
                                  }
                                },
                                {
                                  "properties": {
                                    "mutatedRef": {
                                      "type": "array",
                                      "items": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "x-oapi-codegen-extra-tags": {
                      "yaml": "match",
                      "json": "match"
                    }
                  },
                  "patch": {
                    "allOf": [
                      {
                        "properties": {
                          "patchStrategy": {
                            "description": "patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902). \n\nadd: Inserts a value into an array or adds a member to an object.\nreplace: Replaces a value.\nmerge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.\nstrategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.\nremove: Removes a value.\ncopy: Copies a value from one location to another.\nmove: Moves a value from one location to another.\ntest: Tests that a value at the target location is equal to a specified value.",
                            "$comment": "Array Indexing: When working with arrays, be aware that Kubernetes uses zero-based indexing in JSON patch paths.\nMerge Patch vs. JSON Patch: Merge patches are less flexible than JSON patches and do not support all the same operations.\nStrategic Merge Patch: For some Kubernetes resources, you can also use the strategic type for a strategic merge patch, which understands the structure of Kubernetes objects and can handle complex operations.",
                            "type": "string",
                            "enum": [
                              "merge",
                              "strategic",
                              "add",
                              "remove",
                              "copy",
                              "move",
                              "test"
                            ],
                            "default": "copy"
                          }
                        }
                      },
                      {
                        "oneOf": [
                          {
                            "properties": {
                              "mutatorRef": {
                                "type": "array",
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                },
                                "description": "JSON ref to value from where patch should be applied."
                              }
                            }
                          },
                          {
                            "properties": {
                              "mutatedRef": {
                                "type": "array",
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                }
                              }
                            }
                          }
                        ]
                      }
                    ],
                    "x-oapi-codegen-extra-tags": {
                      "yaml": "patch",
                      "json": "patch"
                    }
                  }
                },
                "description": "Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning."
              }
            },
            "to": {
              "description": "Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "kind": {
                    "type": "string",
                    "x-oapi-codegen-extra-tags": {
                      "yaml": "kind",
                      "json": "kind"
                    }
                  },
                  "model": {
                    "description": "Model implicated by this selector.",
                    "$ref": "../model/model.json",
                    "x-go-type": "model.ModelDefinition",
                    "x-go-type-import": {
                      "path": "github.com/meshery/schemas/models/v1beta1/model"
                    },
                    "x-oapi-codegen-extra-tags": {
                      "yaml": "model",
                      "json": "model"
                    }
                  },
                  "id": {
                    "description": "UUID of the entity.",
                    "$ref": "../../../v1alpha1/core/openapi.yml#/components/schemas/uuid",
                    "x-oapi-codegen-extra-tags": {
                      "yaml": "id",
                      "json": "id"
                    }
                  },
                  "match": {
                    "type": "object",
                    "additionalProperties": false,
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "properties": {
                          "from": {
                            "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "allOf": [
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "string",
                                      "format": "uuid",
                                      "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                      "x-go-type": "uuid.UUID",
                                      "x-go-type-import": {
                                        "path": "github.com/gofrs/uuid"
                                      },
                                      "x-oapi-codegen-extra-tags": {
                                        "yaml": "id",
                                        "json": "id"
                                      }
                                    }
                                  }
                                },
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "mutatorRef": {
                                          "type": "array",
                                          "items": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                          },
                                          "description": "JSON ref to value from where patch should be applied."
                                        }
                                      }
                                    },
                                    {
                                      "properties": {
                                        "mutatedRef": {
                                          "type": "array",
                                          "items": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "to": {
                            "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "allOf": [
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string"
                                    },
                                    "id": {
                                      "type": "string",
                                      "format": "uuid",
                                      "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                      "x-go-type": "uuid.UUID",
                                      "x-go-type-import": {
                                        "path": "github.com/gofrs/uuid"
                                      },
                                      "x-oapi-codegen-extra-tags": {
                                        "yaml": "id",
                                        "json": "id"
                                      }
                                    }
                                  }
                                },
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "mutatorRef": {
                                          "type": "array",
                                          "items": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                          },
                                          "description": "JSON ref to value from where patch should be applied."
                                        }
                                      }
                                    },
                                    {
                                      "properties": {
                                        "mutatedRef": {
                                          "type": "array",
                                          "items": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "match",
                        "json": "match"
                      }
                    },
                    "patch": {
                      "allOf": [
                        {
                          "properties": {
                            "patchStrategy": {
                              "description": "patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902). \n\nadd: Inserts a value into an array or adds a member to an object.\nreplace: Replaces a value.\nmerge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.\nstrategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.\nremove: Removes a value.\ncopy: Copies a value from one location to another.\nmove: Moves a value from one location to another.\ntest: Tests that a value at the target location is equal to a specified value.",
                              "$comment": "Array Indexing: When working with arrays, be aware that Kubernetes uses zero-based indexing in JSON patch paths.\nMerge Patch vs. JSON Patch: Merge patches are less flexible than JSON patches and do not support all the same operations.\nStrategic Merge Patch: For some Kubernetes resources, you can also use the strategic type for a strategic merge patch, which understands the structure of Kubernetes objects and can handle complex operations.",
                              "type": "string",
                              "enum": [
                                "merge",
                                "strategic",
                                "add",
                                "remove",
                                "copy",
                                "move",
                                "test"
                              ],
                              "default": "copy"
                            }
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "properties": {
                                "mutatorRef": {
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                  },
                                  "description": "JSON ref to value from where patch should be applied."
                                }
                              }
                            },
                            {
                              "properties": {
                                "mutatedRef": {
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "patch",
                        "json": "patch"
                      }
                    }
                  },
                  "description": "Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning."
                }
              }
            }
          },
          "allow": {
            "description": "Selectors used to define relationships which are allowed.",
            "type": "object",
            "required": [
              "to",
              "from"
            ],
            "properties": {
              "from": {
                "description": "Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "kind": {
                      "type": "string",
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "kind",
                        "json": "kind"
                      }
                    },
                    "match_strategy_matrix" : {
                      "description": "Strategy criterion for determing how to match the values at mutator/mutated paths",
                      "type":"array",
                      "items":{
                        "type":"array",
                        "items":{
                          "type":"string"
                        }
                      }
                    },
                    "model": {
                      "description": "Model implicated by this selector.",
                      "$ref": "../model/model.json",
                      "x-go-type": "model.ModelDefinition",
                      "x-go-type-import": {
                        "path": "github.com/meshery/schemas/models/v1beta1/model"
                      },
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "model",
                        "json": "model"
                      }
                    },
                    "id": {
                      "description": "UUID of the entity.",
                      "$ref": "../../../v1alpha1/core/openapi.yml#/components/schemas/uuid",
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "id",
                        "json": "id"
                      }
                    },
                    "match": {
                      "type": "object",
                      "additionalProperties": false,
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "properties": {
                            "from": {
                              "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "allOf": [
                                  {
                                    "properties": {
                                      "kind": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                        "x-go-type": "uuid.UUID",
                                        "x-go-type-import": {
                                          "path": "github.com/gofrs/uuid"
                                        },
                                        "x-oapi-codegen-extra-tags": {
                                          "yaml": "id",
                                          "json": "id"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "mutatorRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                            },
                                            "description": "JSON ref to value from where patch should be applied."
                                          }
                                        }
                                      },
                                      {
                                        "properties": {
                                          "mutatedRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "to": {
                              "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "allOf": [
                                  {
                                    "properties": {
                                      "kind": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                        "x-go-type": "uuid.UUID",
                                        "x-go-type-import": {
                                          "path": "github.com/gofrs/uuid"
                                        },
                                        "x-oapi-codegen-extra-tags": {
                                          "yaml": "id",
                                          "json": "id"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "mutatorRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                            },
                                            "description": "JSON ref to value from where patch should be applied."
                                          }
                                        }
                                      },
                                      {
                                        "properties": {
                                          "mutatedRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ],
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "match",
                        "json": "match"
                      }
                    },
                    "patch": {
                      "allOf": [
                        {
                          "properties": {
                            "patchStrategy": {
                              "description": "patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902). \n\nadd: Inserts a value into an array or adds a member to an object.\nreplace: Replaces a value.\nmerge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.\nstrategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.\nremove: Removes a value.\ncopy: Copies a value from one location to another.\nmove: Moves a value from one location to another.\ntest: Tests that a value at the target location is equal to a specified value.",
                              "$comment": "Array Indexing: When working with arrays, be aware that Kubernetes uses zero-based indexing in JSON patch paths.\nMerge Patch vs. JSON Patch: Merge patches are less flexible than JSON patches and do not support all the same operations.\nStrategic Merge Patch: For some Kubernetes resources, you can also use the strategic type for a strategic merge patch, which understands the structure of Kubernetes objects and can handle complex operations.",
                              "type": "string",
                              "enum": [
                                "merge",
                                "strategic",
                                "add",
                                "remove",
                                "copy",
                                "move",
                                "test"
                              ],
                              "default": "copy"
                            }
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "properties": {
                                "mutatorRef": {
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                  },
                                  "description": "JSON ref to value from where patch should be applied."
                                }
                              }
                            },
                            {
                              "properties": {
                                "mutatedRef": {
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "patch",
                        "json": "patch"
                      }
                    }
                  },
                  "description": "Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning."
                }
              },
              "to": {
                "description": "Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "kind": {
                      "type": "string",
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "kind",
                        "json": "kind"
                      }
                    },
                    "model": {
                      "description": "Model implicated by this selector.",
                      "$ref": "../model/model.json",
                      "x-go-type": "model.ModelDefinition",
                      "x-go-type-import": {
                        "path": "github.com/meshery/schemas/models/v1beta1/model"
                      },
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "model",
                        "json": "model"
                      }
                    },
                    "id": {
                      "description": "UUID of the entity.",
                      "$ref": "../../../v1alpha1/core/openapi.yml#/components/schemas/uuid",
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "id",
                        "json": "id"
                      }
                    },
                    "match": {
                      "type": "object",
                      "additionalProperties": false,
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "properties": {
                            "from": {
                              "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "allOf": [
                                  {
                                    "properties": {
                                      "kind": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                        "x-go-type": "uuid.UUID",
                                        "x-go-type-import": {
                                          "path": "github.com/gofrs/uuid"
                                        },
                                        "x-oapi-codegen-extra-tags": {
                                          "yaml": "id",
                                          "json": "id"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "mutatorRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                            },
                                            "description": "JSON ref to value from where patch should be applied."
                                          }
                                        }
                                      },
                                      {
                                        "properties": {
                                          "mutatedRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "to": {
                              "$comment": "Type is array so that mutliple bindings can be supported between 2 nodes",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "allOf": [
                                  {
                                    "properties": {
                                      "kind": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string",
                                        "format": "uuid",
                                        "description": "A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.",
                                        "x-go-type": "uuid.UUID",
                                        "x-go-type-import": {
                                          "path": "github.com/gofrs/uuid"
                                        },
                                        "x-oapi-codegen-extra-tags": {
                                          "yaml": "id",
                                          "json": "id"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "mutatorRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                            },
                                            "description": "JSON ref to value from where patch should be applied."
                                          }
                                        }
                                      },
                                      {
                                        "properties": {
                                          "mutatedRef": {
                                            "type": "array",
                                            "items": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ],
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "match",
                        "json": "match"
                      }
                    },
                    "patch": {
                      "allOf": [
                        {
                          "properties": {
                            "patchStrategy": {
                              "description": "patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902). \n\nadd: Inserts a value into an array or adds a member to an object.\nreplace: Replaces a value.\nmerge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.\nstrategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.\nremove: Removes a value.\ncopy: Copies a value from one location to another.\nmove: Moves a value from one location to another.\ntest: Tests that a value at the target location is equal to a specified value.",
                              "$comment": "Array Indexing: When working with arrays, be aware that Kubernetes uses zero-based indexing in JSON patch paths.\nMerge Patch vs. JSON Patch: Merge patches are less flexible than JSON patches and do not support all the same operations.\nStrategic Merge Patch: For some Kubernetes resources, you can also use the strategic type for a strategic merge patch, which understands the structure of Kubernetes objects and can handle complex operations.",
                              "type": "string",
                              "enum": [
                                "merge",
                                "strategic",
                                "add",
                                "remove",
                                "copy",
                                "move",
                                "test"
                              ],
                              "default": "copy"
                            }
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "properties": {
                                "mutatorRef": {
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "The sequence of mutatorRef and mutatedRef must match. eg: mutatorRef: [[config, url], [config, name]], mutatedRef: [[configPatch, value], [name]]. The value [config, url] will be patched at [configPatch, value]. Similarly [config,name] will be patched at [name]."
                                  },
                                  "description": "JSON ref to value from where patch should be applied."
                                }
                              }
                            },
                            {
                              "properties": {
                                "mutatedRef": {
                                  "type": "array",
                                  "items": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "JSONPath (https://en.wikipedia.org/wiki/JSONPath) to property to be patched."
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "x-oapi-codegen-extra-tags": {
                        "yaml": "patch",
                        "json": "patch"
                      }
                    }
                  },
                  "description": "Optional fields that are a part of the `from` selector. Absence of a field has an implied * meaning."
                }
              }
            }
          }
        }
      }
    }
  }
}
