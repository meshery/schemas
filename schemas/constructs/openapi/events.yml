openapi: 3.0.0
info:
  title: Meshery Cloud
  description: Documentation for meshery Cloud REST APIs
  contact:
    email: support@layer5.io
  version: v0.6.394
servers:
  - url: https://cloud.layer5.io
    description: Meshery Cloud production server URL
  - url: https://staging-cloud.layer5.io
    description: Meshery Cloud staging server URL
  - url: http://localhost:9876
    description: Meshery Cloud development server URL (controlled via PORT environment variable)
tags:
  - name: events
    description: APIs for events
security:
  - jwt: []
components:
  securitySchemes:
    jwt:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  schemas:
    eventType:
      type: string
      x-oapi-codegen-extra-tags:
        db: event_type

    event:
      description: Defines model for event_trackers
      properties:
        id:
          description: |
            UUID of the event.
          $ref: "./common/core.yml#/components/schemas/id"

        user_id:
          $ref: "./common/core.yml#/components/schemas/user_uuid"
          description: |
            UUID of the user that initiated the event. In most cases this would be present, but not always.

        system_id:
          description: |
            The system from which the request is sourced. In the case of Meshery Server,
            the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
          $ref: "./common/core.yml#/components/schemas/system_id"

        operation_id:
          description: |
            Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID.
          $ref: "./common/core.yml#/components/schemas/operation_id"

        category:
          description: |
            Resource name on which the operation is invoked.
          type: string
          example: pattern
          x-oapi-codegen-extra-tags:
            db: category

        action:
          description: |
            Action taken on the resource.
          type: string
          example: deployed
          x-oapi-codegen-extra-tags:
            db: action

        status:
          description: |
            Status for the event.
          type: string
          enum: ["read", "unread"]
          x-oapi-codegen-extra-tags:
            db: status

        acted_upon:
          type: string
          format: uuid
          description: |
            UUID of the entity on which the event was performed.
          example: 110020-123230-434231-000213
          x-go-type: uuid.UUID
          x-oapi-codegen-extra-tags:
            db: acted_upon

        description:
          description: |
            A summary/receipt of event that occured.
          type: string
          example: “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
          x-oapi-codegen-extra-tags:
            db: description

        severity:
          description: |
            A set of seven standard event levels.
          type: string
          enum: [emergency, critical, alert, error, warning, debug, informational, success]
          example: info
          x-oapi-codegen-extra-tags:
            db: severity

        metadata:
          description: |
            Contains meaningful information, specific to the type of event.
            Structure of metadata can be different for different events.
          type: object
          x-go-type: "[]byte"
          x-oapi-codegen-extra-tags:
            db: metadata

        created_at:
          $ref: "./common/core.yml#/components/schemas/created_at"

        updated_at:
          $ref: "./common/core.yml#/components/schemas/updated_at"

        deleted_at:
          $ref: "./common/core.yml#/components/schemas/deleted_at"

      required:
        [
          "id",
          "system_id",
          "operation_id",
          "category",
          "action",
          "status",
          "acted_upon",
          "description",
          "severity",
          "metadata",
          "created_at",
          "updated_at",
        ]

    events_filter:
      type: object
      properties:
        provider:
          type: array
          items:
            type: string
        category:
          type: array
          items:
            type: string
        action:
          type: array
          items:
            type: string
        severity:
          type: array
          items:
            type: string
        limit:
          type: integer
        offset:
          type: integer
        sort_on:
          type: string
          description: "Field on which records are sorted"
        order:
          type: string
          description: "order of sort asc/desc, default is asc"
      required: [provider, category, action, severity, limit, offset, sort_on, order]

    eventTrackerGrouped:
      properties:
        count:
          type: integer
        event_type:
          $ref: "./common/core.yml#/components/schemas/text"
        dt:
          $ref: "./common/core.yml#/components/schemas/time"
        week:
          $ref: "./common/core.yml#/components/schemas/text"
        month:
          $ref: "./common/core.yml#/components/schemas/text"
        year:
          $ref: "./common/core.yml#/components/schemas/text"

    eventTrackerGroupedArray:
      type: array
      items:
        $ref: "#/components/schemas/eventTrackerGrouped"

    eventResult:
      properties:
        event:
          $ref: "#/components/schemas/event"
        events_count:
          type: integer
          x-oapi-codegen-extra-tags:
            db: events_count
      required: [event, events_count]

    eventsPage:
      allOf:
        - $ref: "./common/core.yml#/components/schemas/recordsPage"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/eventResult"

    eventSummary:
      properties:
        user_id:
          type: string
          description: user's email or username
        provider:
          type: string
        email:
          type: string
        first_name:
          type: string
          description: First Name
        last_name:
          type: string
          description: Last Name
        activity_count:
          type: integer
        login_count:
          type: integer
        signup_count:
          type: integer
        perf_results_count:
          type: integer
        smi_results_count:
          type: integer
        meshery_apps_count:
          type: integer
        meshery_patterns_count:
          type: integer
        meshery_filters_count:
          type: integer
        last_login_time:
          type: string
          format: data-time
          x-go-type: time.Time
      required:
        [
          user_id,
          provider,
          email,
          first_name,
          last_name,
          activity_count,
          login_count,
          signup_count,
          perf_results_count,
          smi_results_count,
          meshery_apps_count,
          meshery_patterns_count,
          meshery_filters_count,
          last_login_time,
        ]

    eventSummaryPage:
      allOf:
        - $ref: ./common/core.yml#/components/schemas/recordsPage
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/eventSummary"

    eventsAggregate:
      properties:
        audit:
          type: integer
          description: Number of audit events
        summary:
          type: integer
          description: Number of summary events

paths:
  /api/events:
    get:
      tags:
        - events
      operationId: GetEventsAggregate
      summary: Get Events Aggregate
      description: Get Events Aggreate Count
      parameters:
        - $ref: "./common/parameters.yml#/components/parameters/cumulative"
      responses:
        "200":
          description: Events Aggregate Count
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventsAggregate"
        "401":
          $ref: ./common/responses.yml#/401
        "404":
          $ref: ./common/responses.yml#/404
        "500":
          $ref: ./common/responses.yml#/500

  /api/events/date:
    get:
      tags:
        - events
      operationId: RetrieveResultsByDate
      summary: Events by Date
      description: Get Events by date
      parameters:
        - $ref: ./common/parameters.yml#/components/parameters/cumulative
      responses:
        "200":
          description: Events by date
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventTrackerGroupedArray"
        "401":
          $ref: ./common/responses.yml#/401
        "404":
          $ref: ./common/responses.yml#/404
        "500":
          $ref: ./common/responses.yml#/500
  /api/events/week:
    get:
      tags:
        - events
      operationId: RetrieveResultsByWeek
      summary: Events by Week
      description: Get Events by week
      parameters:
        - $ref: ./common/parameters.yml#/components/parameters/cumulative
      responses:
        "200":
          description: Events by week
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventTrackerGroupedArray"
        "401":
          $ref: ./common/responses.yml#/401
        "404":
          $ref: ./common/responses.yml#/404
        "500":
          $ref: ./common/responses.yml#/500
  /api/events/month:
    get:
      tags:
        - events
      operationId: RetrieveResultsByMonth
      summary: Events by Month
      description: Get Events by month
      parameters:
        - $ref: ./common/parameters.yml#/components/parameters/cumulative
      responses:
        "200":
          description: Events by month
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventTrackerGroupedArray"
        "401":
          $ref: ./common/responses.yml#/401
        "404":
          $ref: ./common/responses.yml#/404
        "500":
          $ref: ./common/responses.yml#/500
  /api/events/list:
    get:
      tags:
        - events
      operationId: GetEvents
      summary: All Events
      description: Get All events
      parameters:
        - $ref: ./common/parameters.yml#/components/parameters/page
        - $ref: ./common/parameters.yml#/components/parameters/page_size
        - $ref: ./common/parameters.yml#/components/parameters/search
        - $ref: ./common/parameters.yml#/components/parameters/order
        - $ref: ./common/parameters.yml#/components/parameters/eventsFilter
      responses:
        "200":
          description: Events list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventsPage"
        "401":
          $ref: ./common/responses.yml#/401
        "404":
          $ref: ./common/responses.yml#/404
        "500":
          $ref: ./common/responses.yml#/500
  /api/events/summary:
    get:
      tags:
        - events
      operationId: GetEventSummaryByUser
      summary: Events Summary
      description: Get Events summary for a user
      parameters:
        - $ref: ./common/parameters.yml#/components/parameters/page
        - $ref: ./common/parameters.yml#/components/parameters/page_size
        - $ref: ./common/parameters.yml#/components/parameters/search
        - $ref: ./common/parameters.yml#/components/parameters/order
      responses:
        "200":
          description: Events Summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventSummaryPage"
        "401":
          $ref: ./common/responses.yml#/401
        "404":
          $ref: ./common/responses.yml#/404
        "500":
          $ref: ./common/responses.yml#/500

