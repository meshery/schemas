openapi: 3.0.0
info:
  title: Meshery Cloud
  description: Documentation for meshery Cloud REST APIs
  contact:
    email: support@layer5.io
  version: v0.6.394
servers:
  - url: https://cloud.layer5.io
    description: Meshery Cloud production server URL
  - url: https://staging-cloud.layer5.io
    description: Meshery Cloud staging server URL
  - url: http://localhost:9876
    description: Meshery Cloud development server URL (controlled via PORT environment variable)
security:
  - jwt: []
tags:
  - name: integrations
    description: APIs for integrations

components:
  schemas:
    connection:
      $ref: ../v1beta1/connection.json
    mesheryInstance:
      properties:
        id:
          $ref: ./common/core.yml#/components/schemas/id
          description: Connection id
        name:
          $ref: ./common/core.yml#/components/schemas/text
          description: Connection name
        server_id:
          $ref: ./common/core.yml#/components/schemas/text
          description: Connected server id
        server_version:
          $ref: ./common/core.yml#/components/schemas/text
          description: Running server version
        server_location:
          $ref: ./common/core.yml#/components/schemas/endpoint
        server_build_sha:
          $ref: ./common/core.yml#/components/schemas/text
          description: Server build SHA
        created_at:
          $ref: ./common/core.yml#/components/schemas/time
        updated_at:
          $ref: ./common/core.yml#/components/schemas/time
        deleted_at:
          $ref: ./common/core.yml#/components/schemas/time
        status:
          $ref: ./common/core.yml#/components/schemas/text
          description: Status

    connectionPage:
      allOf:
        - $ref: ./common/core.yml#/components/schemas/resultsPage
        - type: object
          properties:
            connections:
              x-go-type-skip-optional-pointer: true
              type: array
              items:
                $ref: "#/components/schemas/connection"
    connectionStatusInfo:
      properties:
        status:
          $ref: ./common/core.yml#/components/schemas/text
          description: Connection status
        count:
          type: integer
          description: Number of connections having the status
          x-go-type-skip-optional-pointer: true

    connectionsStatusPage:
      properties:
        connections_status:
          x-go-type-skip-optional-pointer: true
          type: array
          items:
            $ref: "#/components/schemas/connectionStatusInfo"

    # Ideally inside connection Definiton in kubernetes model.
    # Default connection state to be captured in connection definition.
    # Capture transitions in
    k8sContext:
      properties:
        id:
          $ref: ./common/core.yml#/components/schemas/id
        name:
          $ref: ./common/core.yml#/components/schemas/text
        auth:
          $ref: ./common/core.yml#/components/schemas/map_object
        cluster:
          $ref: ./common/core.yml#/components/schemas/map_object
        server:
          type: string
        owner:
          $ref: ./common/core.yml#/components/schemas/id
        created_by:
          $ref: ./common/core.yml#/components/schemas/id
        meshery_instance_id:
          $ref: ./common/core.yml#/components/schemas/id
        kubernetes_server_id:
          $ref: ./common/core.yml#/components/schemas/id
        deployment_type:
          type: string
        updated_at:
          $ref: ./common/core.yml#/components/schemas/time
        created_at:
          $ref: ./common/core.yml#/components/schemas/time
    k8sContextPersistResponse:
      properties:
        k8sContext:
          $ref: "#/components/schemas/k8sContext"
        inserted:
          type: boolean

  requestBodies:
    connectionPayload:
      content:
        application/json:
          schema:
            type: object
            properties:
              kind:
                $ref: ./common/core.yml#/components/schemas/text
                description: Kind
              type:
                $ref: ./common/core.yml#/components/schemas/text
                description: Connection type
              sub_type:
                $ref: ./common/core.yml#/components/schemas/text
                description: Connection subtype
              credential_secret:
                $ref: ./common/core.yml#/components/schemas/map_object
              metadata:
                $ref: ./common/core.yml#/components/schemas/map_object
  securitySchemes:
    jwt:
      type: http
      scheme: Bearer
      bearerFormat: JWT
  # any special parameters for this tag
  parameters:
    connectionKind:
      name: connectionKind
      in: path
      description: "Connection kind (eg: Meshery)"
      required: true
      schema:
        $ref: ./common/core.yml#/components/schemas/text
    connectionId:
      name: connectionId
      in: path
      description: Connection ID
      schema:
        $ref: ./common/core.yml#/components/schemas/id
      required: true
    serverId:
      name: mesheryServerID
      in: path
      description: Meshery server ID
      schema:
        $ref: ./common/core.yml#/components/schemas/id
      required: true
# any special response for this tag
paths:
  /api/integrations/connections:
    post:
      tags:
        - integrations
      operationId: RegisterConnection
      summary: Register Connection
      description: Register with Meshery Cloud
      requestBody:
        $ref: "#/components/requestBodies/connectionPayload"
      responses:
        "200":
          description: Inserted connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connection"
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
    get:
      tags:
        - integrations
      operationId: GetConnections
      summary: Get connections
      description: Get connections
      parameters:
        - $ref: ./common/parameters.yml#/components/parameters/page
        - $ref: ./common/parameters.yml#/components/parameters/page_size
        - $ref: ./common/parameters.yml#/components/parameters/search
        - $ref: ./common/parameters.yml#/components/parameters/order
      responses:
        "200":
          description: Paginated list of connections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectionPage"
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
  /api/integrations/connections/{connectionId}:
    put:
      tags:
        - integrations
      operationId: EditConnectionByID
      summary: Edit Connection by ID
      description: Edit registered connection using the connection ID
      parameters:
        - $ref: "#/components/parameters/connectionId"
      requestBody:
        $ref: "#/components/requestBodies/connectionPayload"
      responses:
        "200":
          description: Edited connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connection"
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
  /api/integrations/connections/status:
    get:
      tags:
        - integrations
      operationId: GetConnectionStatus
      summary: Get status of all connections
      description: Get summary about the status of all connections
      responses:
        "200":
          description: Status of connections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connectionsStatusPage"
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
  /api/integrations/connections/{connectionKind}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKind
      summary: Get connections by kind
      description: Get connections by kind
      parameters:
        - $ref: "#/components/parameters/connectionKind"
        - $ref: ./common/parameters.yml#/components/parameters/page
        - $ref: ./common/parameters.yml#/components/parameters/page_size
        - $ref: ./common/parameters.yml#/components/parameters/search
        - $ref: ./common/parameters.yml#/components/parameters/order
      responses:
        "200":
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
      security: []
    delete:
      tags:
        - integrations
      operationId: DeleteConnection
      summary: Delete connection
      description: Delete registered connection
      parameters:
        - $ref: "#/components/parameters/connectionKind"
      responses:
        "200":
          description: Deleted connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/connection"
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
  /api/integrations/connections/{connectionKind}/{connectionId}:
    get:
      tags:
        - integrations
      operationId: GetConnectionsByKindAndConnectionID
      summary: Get connections by kind and connectionID.
      description: Get connections by kind (kind is required because this API returns the results in non std format of a connection)
      parameters:
        - $ref: "#/components/parameters/connectionKind"
        - $ref: "#/components/parameters/connectionId"
        - $ref: "./common/parameters.yml#/components/parameters/page"
        - $ref: ./common/parameters.yml#/components/parameters/page_size
        - $ref: "./common/parameters.yml#/components/parameters/search"
        - $ref: "./common/parameters.yml#/components/parameters/order"
      responses:
        "200":
          description: Connections by kind
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: "#/components/schemas/k8sContextPersistResponse"
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500
  /api/integrations/connections/meshery/{mesheryServerID}:
    delete:
      tags:
        - integrations
      operationId: DeleteMesheryConnection
      summary: Delete Meshery connection
      description: Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs.
      parameters:
        - $ref: "#/components/parameters/serverId"
      responses:
        "200":
          $ref: ./common/responses.yml#/200
        "401":
          $ref: ./common/responses.yml#/401
        "500":
          $ref: ./common/responses.yml#/500

