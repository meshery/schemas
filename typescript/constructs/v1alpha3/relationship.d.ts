/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Relationships define the nature of interaction between interconnected components in Meshery. The combination of relationship properties kind, type, and subtype characterize various genealogical relations among and between components. Relationships have selectors, selector sets, metadata, and optional parameters. Learn more at https://docs.meshery.io/concepts/logical/relationships.
 */
export interface HttpsSchemasMesheryIoRelationshipJson {
  /**
   * Uniquely identifies the entity (i.e. component) as defined in a declaration (i.e. design).
   */
  id?: string;
  /**
   * Specifies the version of the schema used for the relationship definition.
   */
  schemaVersion: string;
  /**
   * Specifies the version of the relationship definition.
   */
  version: string;
  model: ModelReference;
  /**
   * Kind of the Relationship. Learn more about relationships - https://docs.meshery.io/concepts/logical/relationships.
   */
  kind: "hierarchical" | "edge" | "sibling";
  /**
   * Classification of relationships. Used to group relationships similar in nature.
   */
  type: string;
  /**
   * Most granular unit of relationship classification. The combination of Kind, Type and SubType together uniquely identify a Relationship.
   */
  subType: string;
  /**
   * Status of the relationship.
   */
  status?: "pending" | "approved" | "ignored" | "enabled" | "deleted";
  /**
   * Optional. Assigns the policy to be used for the evaluation of the relationship. Deprecation Notice: In the future, this property is either to be removed or to it is to be an array of optional policy $refs.
   */
  evaluationQuery?: string;
  /**
   * Capabilities associated with the relationship.
   */
  capabilities?: HttpsSchemasMesheryIoCapabilityJson[];
  /**
   * Metadata contains additional information associated with the Relationship.
   */
  metadata?: {
    /**
     * Characterization of the meaning of the relationship and its relevance to both Meshery and entities under management.
     */
    description?: string;
    /**
     * Indicates whether the relationship should be treated as a logical representation only
     */
    isAnnotation?: boolean;
    styles?:
      | ({
          /**
           * Primary color of the component used for UI representation.
           */
          primaryColor: string;
          /**
           * Secondary color of the entity used for UI representation.
           */
          secondaryColor?: string;
          /**
           * White SVG of the entity used for UI representation on dark background.
           */
          svgWhite: string;
          /**
           * Colored SVG of the entity used for UI representation on light background.
           */
          svgColor: string;
          /**
           * Complete SVG of the entity used for UI representation, often inclusive of background.
           */
          svgComplete?: string;
          /**
           * The color of the element's label. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
           */
          color?: string;
          /**
           * The opacity of the label text, including its outline.
           */
          "text-opacity"?: number;
          /**
           * A comma-separated list of font names to use on the label text.
           */
          "font-family"?: string;
          /**
           * The size of the label text.
           */
          "font-size"?: string;
          /**
           * A CSS font style to be applied to the label text.
           */
          "font-style"?: string;
          /**
           * A CSS font weight to be applied to the label text.
           */
          "font-weight"?: string;
          /**
           * A transformation to apply to the label text
           */
          "text-transform"?: "none" | "uppercase" | "lowercase";
          /**
           * The opacity of the element, ranging from 0 to 1. Note that the opacity of a compound node parent affects the effective opacity of its children.See https://js.cytoscape.org/#style/visibility
           */
          opacity?: number;
          /**
           * An integer value that affects the relative draw order of elements. In general, an element with a higher z-index will be drawn on top of an element with a lower z-index. Note that edges are under nodes despite z-index.
           */
          "z-index"?: number;
          /**
           * The text to display for an element’s label. Can give a path, e.g. data(id) will label with the elements id
           */
          label?: string;
        } & {
          /**
           * The animation to use for the edge. Can be like 'marching-ants' , 'blink' , 'moving-gradient',etc .
           */
          "edge-animation"?: string;
          /**
           * The curving method used to separate two or more edges between two nodes; may be haystack (very fast, bundled straight edges for which loops and compounds are unsupported), straight (straight edges with all arrows supported), bezier (bundled curved edges), unbundled-bezier (curved edges for use with manual control points), segments (a series of straight lines), taxi (right-angled lines, hierarchically bundled). Note that haystack edges work best with ellipse, rectangle, or similar nodes. Smaller node shapes, like triangle, will not be as aesthetically pleasing. Also note that edge endpoint arrows are unsupported for haystack edges.
           */
          "curve-style"?: "straight" | "haystack" | "bezier" | "unbundled-bezier" | "segments" | "taxi";
          /**
           * The colour of the edge’s line. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
           */
          "line-color"?: string;
          /**
           * The style of the edge’s line.
           */
          "line-style"?: "solid" | "dotted" | "dashed";
          /**
           * The cap style of the edge’s line; may be butt (default), round, or square. The cap may or may not be visible, depending on the shape of the node and the relative size of the node and edge. Caps other than butt extend beyond the specified endpoint of the edge.
           */
          "line-cap"?: "butt" | "round" | "square";
          /**
           * The opacity of the edge’s line and arrow. Useful if you wish to have a separate opacity for the edge label versus the edge line. Note that the opacity value of the edge element affects the effective opacity of its line and label subcomponents.
           */
          "line-opacity"?: number;
          /**
           * The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
           */
          "target-arrow-color"?: string;
          /**
           * The shape of the edge’s source arrow
           */
          "target-arrow-shape"?:
            | "triangle"
            | "triangle-tee"
            | "circle-triangle"
            | "triangle-cross"
            | "triangle-backcurve"
            | "vee"
            | "tee"
            | "square"
            | "circle"
            | "diamond"
            | "chevron"
            | "none";
          /**
           * The fill state of the edge’s source arrow
           */
          "target-arrow-fill"?: "filled" | "hollow";
          /**
           * The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
           */
          "mid-target-arrow-color"?: string;
          /**
           * The shape of the edge’s source arrow
           */
          "mid-target-arrow-shape"?:
            | "triangle"
            | "triangle-tee"
            | "circle-triangle"
            | "triangle-cross"
            | "triangle-backcurve"
            | "vee"
            | "tee"
            | "square"
            | "circle"
            | "diamond"
            | "chevron"
            | "none";
          /**
           * The fill state of the edge’s source arrow
           */
          "mid-target-arrow-fill"?: "filled" | "hollow";
          /**
           * Scaling for the arrow size.
           */
          "arrow-scale"?: number;
          /**
           * The text to display for an edge’s source label. Can give a path, e.g. data(id) will label with the elements id
           */
          "source-label"?: string;
          /**
           * The text to display for an edge’s target label. Can give a path, e.g. data(id) will label with the elements id
           */
          "target-label"?: string;
          [k: string]: unknown;
        })
      | {
          /**
           * Primary color of the component used for UI representation.
           */
          primaryColor: string;
          /**
           * Secondary color of the entity used for UI representation.
           */
          secondaryColor?: string;
          /**
           * White SVG of the entity used for UI representation on dark background.
           */
          svgWhite: string;
          /**
           * Colored SVG of the entity used for UI representation on light background.
           */
          svgColor: string;
          /**
           * Complete SVG of the entity used for UI representation, often inclusive of background.
           */
          svgComplete?: string;
          /**
           * The color of the element's label. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
           */
          color?: string;
          /**
           * The opacity of the label text, including its outline.
           */
          "text-opacity"?: number;
          /**
           * A comma-separated list of font names to use on the label text.
           */
          "font-family"?: string;
          /**
           * The size of the label text.
           */
          "font-size"?: string;
          /**
           * A CSS font style to be applied to the label text.
           */
          "font-style"?: string;
          /**
           * A CSS font weight to be applied to the label text.
           */
          "font-weight"?: string;
          /**
           * A transformation to apply to the label text
           */
          "text-transform"?: "none" | "uppercase" | "lowercase";
          /**
           * The opacity of the element, ranging from 0 to 1. Note that the opacity of a compound node parent affects the effective opacity of its children.See https://js.cytoscape.org/#style/visibility
           */
          opacity?: number;
          /**
           * An integer value that affects the relative draw order of elements. In general, an element with a higher z-index will be drawn on top of an element with a lower z-index. Note that edges are under nodes despite z-index.
           */
          "z-index"?: number;
          /**
           * The text to display for an element’s label. Can give a path, e.g. data(id) will label with the elements id
           */
          label?: string;
        };
    [k: string]: unknown;
  };
  /**
   * Selectors are organized as an array, with each item containing a distinct set of selectors that share a common functionality. This structure allows for flexibility in defining relationships, even when different components are involved.
   */
  selectors?: {
    /**
     * Optional selectors used to define relationships which should not be created / is restricted.
     */
    deny?: {
      /**
       * Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
       */
      from: {
        kind?: string;
        model?: ModelReference1;
        /**
         * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
         */
        id?: string;
        match?:
          | string[][]
          | {
              from?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              to?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              [k: string]: unknown;
            };
        patch?: {
          /**
           * patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
           *
           * add: Inserts a value into an array or adds a member to an object.
           * replace: Replaces a value.
           * merge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.
           * strategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.
           * remove: Removes a value.
           * copy: Copies a value from one location to another.
           * move: Moves a value from one location to another.
           * test: Tests that a value at the target location is equal to a specified value.
           */
          patchStrategy?: "merge" | "strategic" | "add" | "remove" | "copy" | "move" | "test";
          [k: string]: unknown;
        } & (
          | {
              /**
               * JSON ref to value from where patch should be applied.
               */
              mutatorRef?: string[][];
              [k: string]: unknown;
            }
          | {
              mutatedRef?: string[][];
              [k: string]: unknown;
            }
        );
      }[];
      /**
       * Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
       */
      to: {
        kind?: string;
        model?: ModelReference2;
        /**
         * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
         */
        id?: string;
        match?:
          | string[][]
          | {
              from?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              to?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              [k: string]: unknown;
            };
        patch?: {
          /**
           * patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
           *
           * add: Inserts a value into an array or adds a member to an object.
           * replace: Replaces a value.
           * merge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.
           * strategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.
           * remove: Removes a value.
           * copy: Copies a value from one location to another.
           * move: Moves a value from one location to another.
           * test: Tests that a value at the target location is equal to a specified value.
           */
          patchStrategy?: "merge" | "strategic" | "add" | "remove" | "copy" | "move" | "test";
          [k: string]: unknown;
        } & (
          | {
              /**
               * JSON ref to value from where patch should be applied.
               */
              mutatorRef?: string[][];
              [k: string]: unknown;
            }
          | {
              mutatedRef?: string[][];
              [k: string]: unknown;
            }
        );
      }[];
      [k: string]: unknown;
    };
    /**
     * Selectors used to define relationships which are allowed.
     */
    allow: {
      /**
       * Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
       */
      from: {
        kind?: string;
        /**
         * Strategy criterion for determing how to match the values at mutator/mutated paths
         */
        match_strategy_matrix?: string[][];
        model?: ModelReference3;
        /**
         * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
         */
        id?: string;
        match?:
          | string[][]
          | {
              from?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              to?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              [k: string]: unknown;
            };
        patch?: {
          /**
           * patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
           *
           * add: Inserts a value into an array or adds a member to an object.
           * replace: Replaces a value.
           * merge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.
           * strategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.
           * remove: Removes a value.
           * copy: Copies a value from one location to another.
           * move: Moves a value from one location to another.
           * test: Tests that a value at the target location is equal to a specified value.
           */
          patchStrategy?: "merge" | "strategic" | "add" | "remove" | "copy" | "move" | "test";
          [k: string]: unknown;
        } & (
          | {
              /**
               * JSON ref to value from where patch should be applied.
               */
              mutatorRef?: string[][];
              [k: string]: unknown;
            }
          | {
              mutatedRef?: string[][];
              [k: string]: unknown;
            }
        );
      }[];
      /**
       * Describes the component(s) which are involved in the relationship along with a set of actions to perform upon selection match.
       */
      to: {
        kind?: string;
        model?: ModelReference4;
        /**
         * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
         */
        id?: string;
        match?:
          | string[][]
          | {
              from?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              to?: ({
                kind?: string;
                /**
                 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
                 */
                id?: string;
                [k: string]: unknown;
              } & (
                | {
                    /**
                     * JSON ref to value from where patch should be applied.
                     */
                    mutatorRef?: string[][];
                    [k: string]: unknown;
                  }
                | {
                    mutatedRef?: string[][];
                    [k: string]: unknown;
                  }
              ))[];
              [k: string]: unknown;
            };
        patch?: {
          /**
           * patchStrategy allows you to make specific changes to a resource using a standard JSON Patch format (RFC 6902).
           *
           * add: Inserts a value into an array or adds a member to an object.
           * replace: Replaces a value.
           * merge: Combines the values of the target location with the values from the patch. If the target location doesn't exist, it is created.
           * strategic:specific to Kubernetes and understands the structure of Kubernetes objects. It can handle complex changes like updating lists and maps, as well as preserving default values. However, it's not supported for custom resources. For custom resources, only JSON Patch and Merge Patch are typically supported.
           * remove: Removes a value.
           * copy: Copies a value from one location to another.
           * move: Moves a value from one location to another.
           * test: Tests that a value at the target location is equal to a specified value.
           */
          patchStrategy?: "merge" | "strategic" | "add" | "remove" | "copy" | "move" | "test";
          [k: string]: unknown;
        } & (
          | {
              /**
               * JSON ref to value from where patch should be applied.
               */
              mutatorRef?: string[][];
              [k: string]: unknown;
            }
          | {
              mutatedRef?: string[][];
              [k: string]: unknown;
            }
        );
      }[];
      [k: string]: unknown;
    };
  }[];
}
/**
 * Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models
 */
export interface ModelReference {
  /**
   * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
   */
  id: string;
  /**
   * The unique name for the model within the scope of a registrant.
   */
  name: string;
  /**
   * Version of the model definition.
   */
  version: string;
  /**
   * Human-readable name for the model.
   */
  displayName: string;
  model: Model;
  registrant: RegistrantReference;
  [k: string]: unknown;
}
/**
 * Registrant-defined data associated with the model. Properties pertain to the software being managed (e.g. Kubernetes v1.31).
 */
export interface Model {
  /**
   * Version of the model as defined by the registrant.
   */
  version: string;
  [k: string]: unknown;
}
export interface RegistrantReference {
  kind: string;
  [k: string]: unknown;
}
/**
 * Meshery manages entities in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. Entities may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshery for full lifecycle management.
 */
export interface HttpsSchemasMesheryIoCapabilityJson {
  /**
   * Specifies the version of the schema to which the capability definition conforms.
   */
  schemaVersion: string;
  /**
   * Version of the capability definition.
   */
  version: string;
  /**
   * Name of the capability in human-readible format.
   */
  displayName: string;
  /**
   * A written representation of the purpose and characteristics of the capability.
   */
  description?: string;
  /**
   * Top-level categorization of the capability
   */
  kind: ("action" | "mutate" | "view" | "interaction") & string;
  /**
   * Classification of capabilities. Used to group capabilities similar in nature.
   */
  type: string;
  /**
   * Most granular unit of capability classification. The combination of Kind, Type and SubType together uniquely identify a Capability.
   */
  subType?: string;
  /**
   * Key that backs the capability.
   */
  key?: string;
  /**
   * State of the entity in which the capability is applicable.
   */
  entityState: ("declaration" | "instance")[];
  /**
   * Status of the capability
   */
  status: "enabled" | "disabled";
  /**
   * Metadata contains additional information associated with the capability. Extension point.
   */
  metadata?: {
    [k: string]: unknown;
  };
}
/**
 * Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models
 */
export interface ModelReference1 {
  /**
   * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
   */
  id: string;
  /**
   * The unique name for the model within the scope of a registrant.
   */
  name: string;
  /**
   * Version of the model definition.
   */
  version: string;
  /**
   * Human-readable name for the model.
   */
  displayName: string;
  model: Model;
  registrant: RegistrantReference;
  [k: string]: unknown;
}
/**
 * Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models
 */
export interface ModelReference2 {
  /**
   * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
   */
  id: string;
  /**
   * The unique name for the model within the scope of a registrant.
   */
  name: string;
  /**
   * Version of the model definition.
   */
  version: string;
  /**
   * Human-readable name for the model.
   */
  displayName: string;
  model: Model;
  registrant: RegistrantReference;
  [k: string]: unknown;
}
/**
 * Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models
 */
export interface ModelReference3 {
  /**
   * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
   */
  id: string;
  /**
   * The unique name for the model within the scope of a registrant.
   */
  name: string;
  /**
   * Version of the model definition.
   */
  version: string;
  /**
   * Human-readable name for the model.
   */
  displayName: string;
  model: Model;
  registrant: RegistrantReference;
  [k: string]: unknown;
}
/**
 * Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models
 */
export interface ModelReference4 {
  /**
   * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
   */
  id: string;
  /**
   * The unique name for the model within the scope of a registrant.
   */
  name: string;
  /**
   * Version of the model definition.
   */
  version: string;
  /**
   * Human-readable name for the model.
   */
  displayName: string;
  model: Model;
  registrant: RegistrantReference;
  [k: string]: unknown;
}
