/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A string starting with an alphanumeric character. Spaces and hyphens allowed.
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "inputString".
 */
export type InputString = string;
/**
 * API version of the object
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "versionString".
 */
export type VersionString = string;
/**
 * A valid semantic version string between 5 and 256 characters. The pattern allows for a major.minor.patch version followed by an optional pre-release tag like '-alpha' or '-beta.2' and an optional build metadata tag like '+build.1.
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "semverString".
 */
export type SemverString = string;
/**
 * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "uuid".
 */
export type Uuid = string;
/**
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "time".
 */
export type Time = string;
/**
 * The shape of the node’s body. Note that each shape fits within the specified width and height, and so you may have to adjust width and height if you desire an equilateral shape (i.e. width !== height for several equilateral shapes)
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "shape".
 */
export type Shape =
  | "ellipse"
  | "triangle"
  | "round-triangle"
  | "rectangle"
  | "round-rectangle"
  | "bottom-round-rectangle"
  | "cut-rectangle"
  | "barrel"
  | "rhomboid"
  | "diamond"
  | "round-diamond"
  | "pentagon"
  | "round-pentagon"
  | "hexagon"
  | "round-hexagon"
  | "concave-hexagon"
  | "heptagon"
  | "round-heptagon"
  | "octagon"
  | "round-octagon"
  | "star"
  | "tag"
  | "round-tag"
  | "vee"
  | "polygon";
/**
 * Visualization styles for a relationship
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "edgeStyles".
 */
export type EdgeStyles = Styles & {
  /**
   * The animation to use for the edge. Can be like 'marching-ants' , 'blink' , 'moving-gradient',etc .
   */
  "edge-animation"?: string;
  /**
   * The curving method used to separate two or more edges between two nodes; may be haystack (very fast, bundled straight edges for which loops and compounds are unsupported), straight (straight edges with all arrows supported), bezier (bundled curved edges), unbundled-bezier (curved edges for use with manual control points), segments (a series of straight lines), taxi (right-angled lines, hierarchically bundled). Note that haystack edges work best with ellipse, rectangle, or similar nodes. Smaller node shapes, like triangle, will not be as aesthetically pleasing. Also note that edge endpoint arrows are unsupported for haystack edges.
   */
  "curve-style"?: "straight" | "haystack" | "bezier" | "unbundled-bezier" | "segments" | "taxi";
  /**
   * The colour of the edge’s line. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "line-color"?: string;
  /**
   * The style of the edge’s line.
   */
  "line-style"?: "solid" | "dotted" | "dashed";
  /**
   * The cap style of the edge’s line; may be butt (default), round, or square. The cap may or may not be visible, depending on the shape of the node and the relative size of the node and edge. Caps other than butt extend beyond the specified endpoint of the edge.
   */
  "line-cap"?: "butt" | "round" | "square";
  /**
   * The opacity of the edge’s line and arrow. Useful if you wish to have a separate opacity for the edge label versus the edge line. Note that the opacity value of the edge element affects the effective opacity of its line and label subcomponents.
   */
  "line-opacity"?: number;
  /**
   * The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "target-arrow-color"?: string;
  /**
   * The shape of the edge’s source arrow
   */
  "target-arrow-shape"?:
    | "triangle"
    | "triangle-tee"
    | "circle-triangle"
    | "triangle-cross"
    | "triangle-backcurve"
    | "vee"
    | "tee"
    | "square"
    | "circle"
    | "diamond"
    | "chevron"
    | "none";
  /**
   * The fill state of the edge’s source arrow
   */
  "target-arrow-fill"?: "filled" | "hollow";
  /**
   * The colour of the edge’s source arrow. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "mid-target-arrow-color"?: string;
  /**
   * The shape of the edge’s source arrow
   */
  "mid-target-arrow-shape"?:
    | "triangle"
    | "triangle-tee"
    | "circle-triangle"
    | "triangle-cross"
    | "triangle-backcurve"
    | "vee"
    | "tee"
    | "square"
    | "circle"
    | "diamond"
    | "chevron"
    | "none";
  /**
   * The fill state of the edge’s source arrow
   */
  "mid-target-arrow-fill"?: "filled" | "hollow";
  /**
   * Scaling for the arrow size.
   */
  "arrow-scale"?: number;
  /**
   * The text to display for an edge’s source label. Can give a path, e.g. data(id) will label with the elements id
   */
  "source-label"?: string;
  /**
   * The text to display for an edge’s target label. Can give a path, e.g. data(id) will label with the elements id
   */
  "target-label"?: string;
  [k: string]: unknown;
};
/**
 * Visualization styles for a component
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "componentStyles".
 */
export type ComponentStyles = Styles & {
  shape?: Shape;
  /**
   * The position of the node. If the position is set, the node is drawn at that position in the given dimensions. If the position is not set, the node is drawn at a random position.
   */
  position?: {
    /**
     * The x-coordinate of the node.
     */
    x: number;
    /**
     * The y-coordinate of the node.
     */
    y: number;
  };
  /**
   * The text to display for an element’s body. Can give a path, e.g. data(id) will label with the elements id
   */
  "body-text"?: string;
  /**
   * How to wrap the text in the node. Can be 'none', 'wrap', or 'ellipsis'.
   */
  "body-text-wrap"?: string;
  /**
   * The maximum width for wrapping text in the node.
   */
  "body-text-max-width"?: string;
  /**
   * The opacity of the node’s body text, including its outline.
   */
  "body-text-opacity"?: number;
  /**
   * The colour of the node’s body text background. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "body-text-background-color"?: string;
  /**
   * The size of the node’s body text.
   */
  "body-text-font-size"?: number;
  /**
   * The colour of the node’s body text. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "body-text-color"?: string;
  /**
   * A CSS font weight to be applied to the node’s body text.
   */
  "body-text-font-weight"?: string;
  /**
   * A CSS horizontal alignment to be applied to the node’s body text.
   */
  "body-text-horizontal-align"?: string;
  /**
   * A CSS text decoration to be applied to the node’s body text.
   */
  "body-text-decoration"?: string;
  /**
   * A CSS vertical alignment to be applied to the node’s body text.
   */
  "body-text-vertical-align"?: string;
  /**
   * The width of the node’s body or the width of an edge’s line.
   */
  width?: number;
  /**
   * The height of the node’s body
   */
  height?: number;
  /**
   * The URL that points to the image to show in the node.
   */
  "background-image"?: string;
  /**
   * The colour of the node’s body. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "background-color"?: string;
  /**
   * Blackens the node’s body for values from 0 to 1; whitens the node’s body for values from 0 to -1.
   */
  "background-blacken"?: number;
  /**
   * The opacity level of the node’s background colour
   */
  "background-opacity"?: number;
  /**
   * The x position of the background image, measured in percent (e.g. 50%) or pixels (e.g. 10px)
   */
  "background-position-x"?: string;
  /**
   * The y position of the background image, measured in percent (e.g. 50%) or pixels (e.g. 10px)
   */
  "background-position-y"?: string;
  /**
   * The x offset of the background image, measured in percent (e.g. 50%) or pixels (e.g. 10px)
   */
  "background-offset-x"?: string;
  /**
   * The y offset of the background image, measured in percent (e.g. 50%) or pixels (e.g. 10px)
   */
  "background-offset-y"?: string;
  /**
   * How the background image is fit to the node. Can be 'none', 'contain', or 'cover'.
   */
  "background-fit"?: string;
  /**
   * How the background image is clipped to the node. Can be 'none', 'node', or 'node-border'.
   */
  "background-clip"?: string;
  /**
   * How the background image’s width is determined. Can be 'none', 'inner', or 'outer'.
   */
  "background-width-relative-to"?: string;
  /**
   * How the background image’s height is determined. Can be 'none', 'inner', or 'outer'.
   */
  "background-height-relative-to"?: string;
  /**
   * The size of the node’s border.
   */
  "border-width"?: number;
  /**
   * The style of the node’s border
   */
  "border-style"?: "solid" | "dotted" | "dashed" | "double";
  /**
   * The colour of the node’s border. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "border-color"?: string;
  /**
   * The opacity of the node’s border
   */
  "border-opacity"?: number;
  /**
   * The amount of padding around all sides of the node.
   */
  padding?: number;
  /**
   * The horizontal alignment of a node’s label
   */
  "text-halign"?: "left" | "center" | "right";
  /**
   * The vertical alignment of a node’s label
   */
  "text-valign"?: "top" | "center" | "bottom";
  /**
   * Whether to use the ghost effect, a semitransparent duplicate of the element drawn at an offset.
   */
  ghost?: "yes" | "no";
  /**
   * The colour of the indicator shown when the background is grabbed by the user. Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "active-bg-color"?: string;
  /**
   *  The opacity of the active background indicator. Selector needs to be *core*.
   */
  "active-bg-opacity"?: string;
  /**
   *  The opacity of the active background indicator. Selector needs to be *core*.
   */
  "active-bg-size"?: string;
  /**
   * The background colour of the selection box used for drag selection. Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "selection-box-color"?: string;
  /**
   * The size of the border on the selection box. Selector needs to be *core*
   */
  "selection-box-border-width"?: number;
  /**
   * The opacity of the selection box.  Selector needs to be *core*
   */
  "selection-box-opacity"?: number;
  /**
   * The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.  Selector needs to be *core*. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "outside-texture-bg-color"?: string;
  /**
   * The opacity of the area outside the viewport texture. Selector needs to be *core*
   */
  "outside-texture-bg-opacity"?: number;
  /**
   * An array (or a space-separated string) of numbers ranging on [-1, 1], representing alternating x and y values (i.e. x1 y1 x2 y2, x3 y3 ...). This represents the points in the polygon for the node’s shape. The bounding box of the node is given by (-1, -1), (1, -1), (1, 1), (-1, 1). The node’s position is the origin (0, 0 )
   */
  "shape-polygon-points"?: string;
  /**
   * The colour of the background of the component menu. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "menu-background-color"?: string;
  /**
   * The opacity of the background of the component menu.
   */
  "menu-background-opacity"?: number;
  /**
   * The colour of the text or icons in the component menu. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  "menu-forground-color"?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "relationshipStyles".
 */
export type RelationshipStyles = EdgeStyles | Styles1;
/**
 * An resolved alias is an component that acts as an ref/pointer to a field in another component, resolvedAlias are aware of there immediate parents and completely resolved parents also
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "ResolvedAlias".
 */
export type ResolvedAlias = NonResolvedAlias & {
  resolved_parent_id: Uuid;
  resolved_ref_field_path: string[];
  [k: string]: unknown;
};

/**
 * Reusable core schema elements
 */
export interface CoreJson {
  [k: string]: unknown;
}
/**
 * Common styles for all entities
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "styles".
 */
export interface Styles {
  /**
   * Primary color of the component used for UI representation.
   */
  primaryColor: string;
  /**
   * Secondary color of the entity used for UI representation.
   */
  secondaryColor?: string;
  /**
   * White SVG of the entity used for UI representation on dark background.
   */
  svgWhite: string;
  /**
   * Colored SVG of the entity used for UI representation on light background.
   */
  svgColor: string;
  /**
   * Complete SVG of the entity used for UI representation, often inclusive of background.
   */
  svgComplete?: string;
  /**
   * The color of the element's label. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  color?: string;
  /**
   * The opacity of the label text, including its outline.
   */
  "text-opacity"?: number;
  /**
   * A comma-separated list of font names to use on the label text.
   */
  "font-family"?: string;
  /**
   * The size of the label text.
   */
  "font-size"?: string;
  /**
   * A CSS font style to be applied to the label text.
   */
  "font-style"?: string;
  /**
   * A CSS font weight to be applied to the label text.
   */
  "font-weight"?: string;
  /**
   * A transformation to apply to the label text
   */
  "text-transform"?: "none" | "uppercase" | "lowercase";
  /**
   * The opacity of the element, ranging from 0 to 1. Note that the opacity of a compound node parent affects the effective opacity of its children.See https://js.cytoscape.org/#style/visibility
   */
  opacity?: number;
  /**
   * An integer value that affects the relative draw order of elements. In general, an element with a higher z-index will be drawn on top of an element with a lower z-index. Note that edges are under nodes despite z-index.
   */
  "z-index"?: number;
  /**
   * The text to display for an element’s label. Can give a path, e.g. data(id) will label with the elements id
   */
  label?: string;
}
/**
 * Common styles for all entities
 */
export interface Styles1 {
  /**
   * Primary color of the component used for UI representation.
   */
  primaryColor: string;
  /**
   * Secondary color of the entity used for UI representation.
   */
  secondaryColor?: string;
  /**
   * White SVG of the entity used for UI representation on dark background.
   */
  svgWhite: string;
  /**
   * Colored SVG of the entity used for UI representation on light background.
   */
  svgColor: string;
  /**
   * Complete SVG of the entity used for UI representation, often inclusive of background.
   */
  svgComplete?: string;
  /**
   * The color of the element's label. Colours may be specified by name (e.g. red), hex (e.g. #ff0000 or #f00), RGB (e.g. rgb(255, 0, 0)), or HSL (e.g. hsl(0, 100%, 50%)).
   */
  color?: string;
  /**
   * The opacity of the label text, including its outline.
   */
  "text-opacity"?: number;
  /**
   * A comma-separated list of font names to use on the label text.
   */
  "font-family"?: string;
  /**
   * The size of the label text.
   */
  "font-size"?: string;
  /**
   * A CSS font style to be applied to the label text.
   */
  "font-style"?: string;
  /**
   * A CSS font weight to be applied to the label text.
   */
  "font-weight"?: string;
  /**
   * A transformation to apply to the label text
   */
  "text-transform"?: "none" | "uppercase" | "lowercase";
  /**
   * The opacity of the element, ranging from 0 to 1. Note that the opacity of a compound node parent affects the effective opacity of its children.See https://js.cytoscape.org/#style/visibility
   */
  opacity?: number;
  /**
   * An integer value that affects the relative draw order of elements. In general, an element with a higher z-index will be drawn on top of an element with a lower z-index. Note that edges are under nodes despite z-index.
   */
  "z-index"?: number;
  /**
   * The text to display for an element’s label. Can give a path, e.g. data(id) will label with the elements id
   */
  label?: string;
}
/**
 * An alias is an component that acts as an ref/pointer to a field in another component, nonResolvedAlias are not aware of there immediate parents
 *
 * This interface was referenced by `CoreJson`'s JSON-Schema
 * via the `definition` "NonResolvedAlias".
 */
export interface NonResolvedAlias {
  relationship_id: Uuid;
  alias_component_id: Uuid;
  immediate_parent_id: Uuid;
  immediate_ref_field_path: string[];
  [k: string]: unknown;
}
