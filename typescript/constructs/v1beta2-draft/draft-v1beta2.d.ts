/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Components are reusable building blocks for depicting capabilities defined within models. Learn more at https://docs.meshery.io/concepts/components
 */
export interface HttpsSchemasMesheryIoComponentJson {
  /**
   * Specifies the version of the schema to which the component definition conforms.
   */
  schemaVersion: string;
  /**
   * Specifies the version of the component definition.
   */
  version: string;
  /**
   * Name of the component in human-readible format.
   */
  displayName?: string;
  /**
   * A written representation of the purpose and characteristics of the component.
   */
  description?: string;
  /**
   * Format specifies the format used in the `component.schema` field. JSON is the default.
   */
  format?: "JSON" | "CUE";
  model: HttpsSchemasMesheryIoModelJson;
  /**
   * Metadata contains additional information associated with the component.
   */
  metadata?: {
    /**
     * Meshery manages components in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. ComponentDefinitions may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshery for full lifecycle management.
     */
    capabilities?: {
      [k: string]: unknown;
    };
    /**
     * Genealogy represents the various representational states of the component.
     */
    genealogy?: string;
    /**
     * Identifies whether the component is semantically meaningful or not; identifies whether the component should be treated as deployable entity or is for purposes of logical representation.
     */
    isAnnotation?: boolean;
    /**
     * Shape of the component used for UI representation.
     */
    shape:
      | "ellipse"
      | "triangle"
      | "round-triangle"
      | "rectangle"
      | "round-rectangle"
      | "bottom-round-rectangle"
      | "cut-rectangle"
      | "barrel"
      | "rhomboid"
      | "diamond"
      | "round-diamond"
      | "pentagon"
      | "round-pentagon"
      | "hexagon"
      | "round-hexagon"
      | "concave-hexagon"
      | "heptagon"
      | "round-heptagon"
      | "octagon"
      | "round-octagon"
      | "star"
      | "tag"
      | "round-tag"
      | "vee";
    /**
     * Primary color of the component used for UI representation.
     */
    primaryColor: string;
    /**
     * Secondary color of the component used for UI representation.
     */
    secondaryColor?: string;
    /**
     * White SVG of the component used for UI representation on dark background.
     */
    svgWhite: string;
    /**
     * Colored SVG of the component used for UI representation on light background.
     */
    svgColor: string;
    /**
     * Complete SVG of the component used for UI representation, often inclusive of background.
     */
    svgComplete?: string;
    /**
     * Status of the component.
     */
    status?: "ignore" | "publish" | "duplicate" | "maintenance";
    /**
     * 'published' controls whether the component should be registered in Meshery Registry. When the same 'published' property in Models, is set to 'false', the Model property takes precedence with all Entities in the Model not being registered.
     */
    published?: boolean;
    [k: string]: unknown;
  };
  /**
   * Component and it's properties.
   */
  component: {
    /**
     * Version of the component produced by the registrant. Example: APIVersion of a Kubernetes Pod.
     */
    version: string;
    /**
     * The unique identifier (name) assigned by the registrant to this component. Example: A Kubernetes Pod is of kind 'Pod'.
     */
    kind: string;
    /**
     * JSON schema of the object as defined by the registrant.
     */
    schema: string;
    [k: string]: unknown;
  };
}
/**
 * Reference to the specific registered model to which the component belongs and from which model version, category, and other properties may be referenced. Learn more at https://docs.meshery.io/concepts/models
 */
export interface HttpsSchemasMesheryIoModelJson {
  /**
   * Uniquely identifies the entity (i.e. component) as defined in a declaration (i.e. design).
   */
  id?: string;
  /**
   * Specifies the version of the schema used for the definition.
   */
  schemaVersion?: string;
  /**
   * Version of the model definition.
   */
  version: string;
  /**
   * The unique name for the model within the scope of a registrant.
   */
  name: string;
  /**
   * Human-readable name for the model.
   */
  displayName?: string;
  /**
   * Description of the model.
   */
  description?: string;
  /**
   * Status of model, including:
   * - duplicate: this component is a duplicate of another. The component that is to be the canonical reference and that is duplicated by other components should not be assigned the 'duplicate' status.
   * - maintenance: model is unavailable for a period of time.
   * - enabled: model is available for use for all users of this Meshery Server.
   * - ignored: model is unavailable for use for all users of this Meshery Server.
   */
  status?: "ignored" | "enabled" | "duplicate";
  registrant: HttpsSchemasMesheryIoComponentJson1;
  /**
   * Category of the model.
   */
  category: {
    /**
     * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
     */
    id?: string;
    name?: string;
    metadata?: {
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Sub-category of the model.
   */
  subCategory?: string;
  /**
   * Metadata containing additional information associated with the model.
   */
  metadata?: {
    /**
     * Capabilities associated with the model
     */
    capabilities?: HttpsSchemasMesheryIoCapabilityJson[];
    /**
     * Indicates whether the model and its entities should be treated as deployable entities or as logical representations.
     */
    isAnnotation?: boolean;
    /**
     * Primary color associated with the model.
     */
    primaryColor?: string;
    /**
     * Secondary color associated with the model.
     */
    secondaryColor?: string;
    /**
     * SVG representation of the model in white color.
     */
    svgWhite?: string;
    /**
     * SVG representation of the model in colored format.
     */
    svgColor?: string;
    /**
     * SVG representation of the complete model.
     */
    svgComplete?: string;
    [k: string]: unknown;
  };
  /**
   * Registrant-defined data associated with the model. Properties pertain to the software being managed (e.g. Kubernetes v1.31)
   */
  model?: {
    /**
     * Version of the model as defined by the registrant.
     */
    version: string;
    [k: string]: unknown;
  };
}
/**
 * Meshery Connections are managed and unmanaged resources that either through discovery or manual entry are tracked by Meshery. Learn more at https://docs.meshery.io/concepts/logical/connections
 */
export interface HttpsSchemasMesheryIoComponentJson1 {
  /**
   * ID
   */
  id?: string;
  /**
   * Connection Name
   */
  name?: string;
  /**
   * Credential ID
   */
  credential_id?: string;
  /**
   * Connection Type
   */
  type: string;
  /**
   * Connection Subtype
   */
  sub_type?: string;
  /**
   * Connection Kind
   */
  kind: string;
  metadata?: {
    [k: string]: unknown;
  };
  /**
   * Connection Status
   */
  status:
    | "discovered"
    | "registered"
    | "connected"
    | "ignored"
    | "maintenance"
    | "disconnected"
    | "deleted"
    | "not found";
  /**
   * A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
   */
  user_id?: string;
  created_at?: string;
  updated_at?: string;
  deleted_at?: string;
}
/**
 * Meshery manages entities in accordance with their specific capabilities. This field explicitly identifies those capabilities largely by what actions a given component supports; e.g. metric-scrape, sub-interface, and so on. This field is extensible. Entities may define a broad array of capabilities, which are in-turn dynamically interpretted by Meshery for full lifecycle management.
 */
export interface HttpsSchemasMesheryIoCapabilityJson {
  /**
   * Specifies the version of the schema to which the capability definition conforms.
   */
  schemaVersion: string;
  /**
   * Version of the capability definition.
   */
  version: string;
  /**
   * Name of the capability in human-readible format.
   */
  displayName: string;
  /**
   * A written representation of the purpose and characteristics of the capability.
   */
  description?: string;
  /**
   * Top-level categorization of the capability
   */
  kind: ("action" | "mutate" | "view" | "interaction") & string;
  /**
   * Classification of capabilities. Used to group capabilities similar in nature.
   */
  type: string;
  /**
   * Most granular unit of capability classification. The combination of Kind, Type and SubType together uniquely identify a Capability.
   */
  subType?: string;
  /**
   * Key that backs the capability.
   */
  key?: string;
  /**
   * State of the entity in which the capability is applicable.
   */
  entityState: ("declaration" | "instance")[];
  /**
   * Status of the capability
   */
  status: "enabled" | "disabled";
  /**
   * Metadata contains additional information associated with the capability. Extension point.
   */
  metadata?: {
    [k: string]: unknown;
  };
}
