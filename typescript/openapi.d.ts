/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/capabilities": {
    /** Get available capabilities for logged in user */
    get: operations["GetCapabilitie"];
  };
  "/{meshery-version}/capabilities": {
    /** Get available capabilities for logged in user */
    get: operations["GetCapabilities"];
  };
  "/collaboration": {
    /** Collaboration */
    get: operations["CollaborationHandler"];
  };
  "/api/integrations/connections": {
    /** Get connections */
    get: operations["GetConnections"];
    /** Register with Meshery Cloud */
    post: operations["RegisterConnection"];
  };
  "/api/integrations/connections/{connectionId}": {
    /** Edit registered connection using the connection ID */
    put: operations["EditConnectionByID"];
  };
  "/api/integrations/connections/status": {
    /** Get summary about the status of all connections */
    get: operations["GetConnectionStatus"];
  };
  "/api/integrations/connections/{connectionKind}": {
    /** Get connections by kind */
    get: operations["GetConnectionsByKind"];
    /** Delete registered connection */
    delete: operations["DeleteConnection"];
  };
  "/api/integrations/connections/{connectionKind}/{connectionId}": {
    /** Get connections by kind (kind is required because this API returns the results in non std format of a connection) */
    get: operations["GetConnectionsByKindAndConnectionID"];
  };
  "/api/integrations/connections/meshery/{mesheryServerID}": {
    /** Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs. */
    delete: operations["DeleteMesheryConnection"];
  };
  "/api/system/user/credentials": {
    /** Get all user's credentials for logged in user */
    get: operations["GetUserCredentials"];
    /** Update credentials for logged in user */
    put: operations["UpdateUserCredential"];
    /** Create new credentials for logged in user */
    post: operations["SaveUserCredential"];
    /** Delete user's credentials (tombstoned records) for logged in user */
    delete: operations["DeleteUserCredential"];
  };
  "/api/events": {
    /** Get Events Aggreate Count */
    get: operations["GetEventsAggregate"];
  };
  "/api/events/date": {
    /** Get Events by date */
    get: operations["RetrieveResultsByDate"];
  };
  "/api/events/week": {
    /** Get Events by week */
    get: operations["RetrieveResultsByWeek"];
  };
  "/api/events/month": {
    /** Get Events by month */
    get: operations["RetrieveResultsByMonth"];
  };
  "/api/events/list": {
    /** Get All events */
    get: operations["GetEvents"];
  };
  "/api/events/summary": {
    /** Get Events summary for a user */
    get: operations["GetEventSummaryByUser"];
  };
  "/api/content/filters": {
    /** Get paginated filters */
    get: operations["GetFilters"];
    /** It will insert the filter if not present else it will update the matching entry */
    post: operations["UpsertFilter"];
  };
  "/api/content/filters/file/{id}": {
    /** Get the filter associated with the given filter id without any metadata */
    get: operations["GetFilterFile"];
  };
  "/api/content/filters/{id}": {
    /** Get filter by ID */
    get: operations["GetFilter"];
    /** Delete filter associated with ID */
    delete: operations["DeleteFilter"];
  };
  "/api/content/filters/clone/{id}": {
    /** Clone filter associated with ID */
    post: operations["CloneFilter"];
  };
  "/api/meshmodels/register": {
    post: operations["RegisterMeshmodels"];
  };
  "/api/meshmodels/export": {
    get: operations["ExportModel"];
  };
  "/system/roles": {
    /** Get All supported roles */
    get: operations["GetAllRoles"];
    /** Assign role to user */
    post: operations["AddRoleHolder"];
  };
  "/system/roles/edit": {
    /** Edit role of user */
    post: operations["EditRoleHolder"];
  };
  "/system/roles/edit/bulk": {
    /** Edit roles of user in bulk */
    post: operations["BulkEditRoleHolder"];
  };
  "/system/roles/{id}": {
    /** Edit roles of user in bulk */
    delete: operations["DeleteRole"];
  };
  "/api/performance/smp/profiles": {
    /** Get Performance Profiles for SMP Dashboard */
    get: operations["SMPDashboardPerfProfiles"];
  };
  "/api/performance/smp/profiles/{id}/results": {
    /** Get Performance Profiles results by ID for SMP Dashboard */
    get: operations["SMPDashboardTestResults"];
  };
  "/api/performance/profiles": {
    /** Get performance profiles */
    get: operations["GetPerformanceProfiles"];
    /** Update performance profiles or create a new performance profile if no id is provided */
    post: operations["UpsertPerformanceProfile"];
  };
  "/api/performance/profiles/{id}": {
    /** Get Performance Profile by ID */
    get: operations["GetPerformanceProfile"];
    /** Delete performance profiles by ID */
    delete: operations["DeletePerformanceProfile"];
  };
  "/api/performance/profiles/{id}/results": {
    /** Get paginated Performance Profiles result */
    get: operations["GetPerformanceProfileResults"];
    /** Add performance profile result in given performance profile id */
    post: operations["AddPerformanceProfileResult"];
  };
  "/api/performance/profiles/{id}/results/{resultID}": {
    /** Get the performance test result associated with the given profile id and with the given test id */
    get: operations["GetPerformanceProfileResult"];
  };
  "/system/user/tokens": {
    /** Get tokens associated with logged in user */
    get: operations["GetUserTokens"];
    /** Generates infinite token (i.e. tokens that do not expire) for the logged in user. */
    post: operations["GenerateToken"];
    /** Delete token for logged in user */
    delete: operations["DeleteUserTokens"];
  };
  "/system/token": {
    /** Get Infinite Token */
    get: operations["IssueIndefiniteLifetimeToken"];
  };
  "/api/identity/users/invite": {
    /** Send invitation request to users */
    post: operations["HandleUserInvite"];
  };
  "/api/identity/users/preferences": {
    /** Upsert user preferences */
    put: operations["UpdateUserPreference"];
  };
  "/api/identity/users/keys": {
    /** Get all keys based on roles assigned to user */
    get: operations["GetUserKeys"];
  };
  "/api/user/{user_id}": {
    /** Get specific user by user id */
    get: operations["GetUserById"];
  };
  "/api/identity/users/{delete_on}": {
    /** Delete users based on delete_for parameter */
    post: operations["DeleteUsers"];
  };
  "/api/system/delete/user/{user_id}": {
    /** Delete account by ID */
    get: operations["DeleteUserAccountById"];
  };
  "/api/identity/users": {
    /** Get All users */
    get: operations["GetRoleHolders"];
  };
  "/api/users": {
    /** Get All users */
    get: operations["GetUsers"];
  };
  "/api/identity/users/profile/{id}": {
    /** Get user profile of given user Id */
    get: operations["GetUserProfileById"];
  };
  "/api/identity/users/profile": {
    /** Get user details for logged in user */
    get: operations["GetUser"];
    /** Update user profile data (also updates kratos identity) */
    put: operations["UpdateProfile"];
  };
  "/api/identity/users/profile/details": {
    /** Get Profile overview for logged in user */
    get: operations["GetProfileOverview"];
  };
  "/api/identity/users/{user_id}/profile/activity": {
    /** Get last 10 user activities */
    get: operations["GetUserActivity"];
  };
  "/api/identity/users/online": {
    /** Get info of active / online users in last 24 hours */
    get: operations["GetRecentlyOnlineUsers"];
  };
  "/api/identity/badges": {
    /** Gets available badges */
    get: operations["GetAvailableBadges"];
  };
}

export interface components {
  schemas: {
    capability: {
      /** @description Provider type */
      provider_type?: components["schemas"]["provider"];
      /** @description Package version */
      package_version?: components["schemas"]["text"];
      /** @description Package url */
      package_url?: components["schemas"]["text"];
      /** @description Provider name */
      provider_name?: components["schemas"]["text"];
      provider_description?: components["schemas"]["text"][];
      extensions?: components["schemas"]["capabilityExtension"];
      capabilities?: components["schemas"]["capabilityGeneralCapability"];
      restrictedAccess?: components["schemas"]["restrictedAccess"];
    };
    capabilityNavigatorExtension: {
      /** @description Title */
      title?: components["schemas"]["text"];
      on_click_callback?: number;
      href?: {
        /** Format: uri */
        uri?: string;
        external?: boolean;
      };
      /** @description Component */
      component?: components["schemas"]["text"];
      /** @description Icon link */
      icon?: components["schemas"]["text"];
      /**
       * Format: uri
       * @description link
       */
      link?: components["schemas"]["text"];
      /** @description Controls whether to show the extension or not */
      show?: boolean;
      /** @description Extension type */
      type?: components["schemas"]["text"];
      allowedTo?: { [key: string]: unknown };
    };
    capabilityUserPrefExtension: {
      /** @description Component */
      component?: components["schemas"]["text"];
      /** @description Extension type */
      type?: components["schemas"]["text"];
    };
    capabilityGraphQLExtension: {
      /** @description Component */
      component?: components["schemas"]["text"];
      /** @description Path */
      path?: components["schemas"]["text"];
      /** @description Extension type */
      type?: components["schemas"]["text"];
    };
    capabilitiesAccountExtension: {
      /** @description Title */
      title?: components["schemas"]["text"];
      on_click_callback?: number;
      href?: {
        /** Format: uri */
        uri?: string;
        external?: boolean;
      };
      /** @description Component */
      component?: components["schemas"]["text"];
      /**
       * Format: uri
       * @description link
       */
      link?: components["schemas"]["text"];
      /** @description Controls whether to show the extension or not */
      show?: boolean;
      /** @description Extension type */
      type?: components["schemas"]["text"];
    };
    restrictedAccess: {
      isMesheryUIRestricted?: boolean;
      allowedComponents?: {
        navigator?: { [key: string]: unknown };
        header?: { [key: string]: unknown };
      };
    };
    capabilityGeneralCapability: {
      /** @description Feature name */
      feature?: components["schemas"]["text"];
      endpoint?: components["schemas"]["text"];
    };
    capabilityExtension: {
      navigator?: components["schemas"]["capabilityNavigatorExtension"][];
      user_prefs?: components["schemas"]["capabilityUserPrefExtension"][];
      graphql?: components["schemas"]["capabilityGraphQLExtension"][];
      account?: components["schemas"]["capabilitiesAccountExtension"][];
    };
    /** @description One of (x-oapi-codegen-extra-tags-cloud, github, google) */
    provider: string;
    text: string;
    /** @description Meshery Connections are managed and unmanaged resources that either through discovery or manual entry are tracked by Meshery. Learn more at https://docs.meshery.io/concepts/logical/connections */
    connection: {
      /** @description ID */
      id?: components["schemas"]["uuid"];
      /** @description Connection Name */
      name?: string;
      /** @description Credential ID */
      credential_id?: components["schemas"]["uuid"];
      /** @description Connection Type */
      type: string;
      /** @description Connection Subtype */
      sub_type?: string;
      /** @description Connection Kind */
      kind: string;
      metadata?: { [key: string]: unknown };
      /**
       * @description Connection Status
       * @enum {string}
       */
      status:
        | "discovered"
        | "registered"
        | "connected"
        | "ignored"
        | "maintenance"
        | "disconnected"
        | "deleted"
        | "not found";
      user_id?: components["schemas"]["uuid"];
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
      deleted_at?: components["schemas"]["time"];
    };
    mesheryInstance: {
      /** @description Connection id */
      id?: components["schemas"]["id"];
      /** @description Connection name */
      name?: components["schemas"]["text"];
      /** @description Connected server id */
      server_id?: components["schemas"]["text"];
      /** @description Running server version */
      server_version?: components["schemas"]["text"];
      server_location?: components["schemas"]["text"];
      /** @description Server build SHA */
      server_build_sha?: components["schemas"]["text"];
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
      deleted_at?: components["schemas"]["time"];
      /** @description Status */
      status?: components["schemas"]["text"];
    };
    connectionPage: components["schemas"]["resultsPage"] & {
      connections?: components["schemas"]["connection"][];
    };
    connectionStatusInfo: {
      /** @description Connection status */
      status?: components["schemas"]["text"];
      /** @description Number of connections having the status */
      count?: number;
    };
    connectionsStatusPage: {
      connections_status?: components["schemas"]["connectionStatusInfo"][];
    };
    k8sContext: {
      id?: components["schemas"]["id"];
      name?: components["schemas"]["text"];
      auth?: components["schemas"]["map_object"];
      cluster?: components["schemas"]["map_object"];
      server?: string;
      owner?: components["schemas"]["id"];
      created_by?: components["schemas"]["id"];
      meshery_instance_id?: components["schemas"]["id"];
      kubernetes_server_id?: components["schemas"]["id"];
      deployment_type?: string;
      updated_at?: components["schemas"]["time"];
      created_at?: components["schemas"]["time"];
    };
    k8sContextPersistResponse: {
      k8sContext?: components["schemas"]["k8sContext"];
      inserted?: boolean;
    };
    resultsPage: {
      page?: number;
      page_size?: number;
      total_count?: number;
      resultType?: string;
    };
    /**
     * Format: uuid
     * @description A Universally Unique Identifier used to uniquely identify entites in Meshery. The UUID core defintion is used across different schemas.
     * @default 00000000-00000000-00000000-00000000
     */
    uuid: string;
    /** Format: date-time */
    time: string;
    map_object: { [key: string]: string };
    /** Format: uuid */
    id: string;
    credential: {
      id?: components["schemas"]["id"];
      user_id?: components["schemas"]["id"];
      name?: components["schemas"]["text"];
      type?: string;
      secret?: components["schemas"]["map_object"];
      created_at?: components["schemas"]["created_at"];
      updated_at?: components["schemas"]["updated_at"];
      deleted_at?: components["schemas"]["deleted_at"];
    };
    credentialsPage: components["schemas"]["resultsPage"] & {
      credential?: components["schemas"]["credential"][];
    };
    /**
     * Format: date-time
     * @description Timestamp when the resource was created.
     */
    created_at: string;
    /**
     * Format: date-time
     * @description Timestamp when the resource was updated.
     */
    updated_at: string;
    /**
     * Format: date-time
     * @description Timestamp when the resource was deleted.
     */
    deleted_at: string;
    eventType: string;
    /** @description Defines model for event_trackers */
    event: {
      /** @description UUID of the event. */
      id: components["schemas"]["id"];
      /** @description UUID of the user that initiated the event. In most cases this would be present, but not always. */
      user_id?: components["schemas"]["user_uuid"];
      /**
       * @description The system from which the request is sourced. In the case of Meshery Server,
       * the ID is meshery_instance_id of Meshery Server (which can be found in the metadata of`Connections` table).
       */
      system_id: components["schemas"]["system_id"];
      /** @description Each Event will have a OperationID. This field is never NULL, which is to say an operation can result in series of events, for eg: Different stages of Pattern Engine / activities of Workflow engine. Each operation (and sub-operation) will have a different operation ID. */
      operation_id: components["schemas"]["operation_id"];
      /**
       * @description Resource name on which the operation is invoked.
       *
       * @example pattern
       */
      category: string;
      /**
       * @description Action taken on the resource.
       *
       * @example deployed
       */
      action: string;
      /**
       * @description Status for the event.
       *
       * @enum {string}
       */
      status: "read" | "unread";
      /**
       * Format: uuid
       * @description UUID of the entity on which the event was performed.
       *
       * @example 110020-123230-434231-000213
       */
      acted_upon: string;
      /**
       * @description A summary/receipt of event that occured.
       *
       * @example “Prometheus” pattern deployed in K8s ctx “Meshery Cloud”.
       */
      description: string;
      /**
       * @description A set of seven standard event levels.
       *
       * @example info
       * @enum {string}
       */
      severity:
        | "emergency"
        | "critical"
        | "alert"
        | "error"
        | "warning"
        | "debug"
        | "informational"
        | "success";
      /**
       * @description Contains meaningful information, specific to the type of event.
       * Structure of metadata can be different for different events.
       */
      metadata: { [key: string]: unknown };
      created_at: components["schemas"]["created_at"];
      updated_at: components["schemas"]["updated_at"];
      deleted_at?: components["schemas"]["deleted_at"];
    };
    events_filter: {
      provider: string[];
      category: string[];
      action: string[];
      severity: string[];
      limit: number;
      offset: number;
      /** @description Field on which records are sorted */
      sort_on: string;
      /** @description order of sort asc/desc, default is asc */
      order: string;
    };
    eventTrackerGrouped: {
      count?: number;
      event_type?: components["schemas"]["text"];
      dt?: components["schemas"]["time"];
      week?: components["schemas"]["text"];
      month?: components["schemas"]["text"];
      year?: components["schemas"]["text"];
    };
    eventTrackerGroupedArray: components["schemas"]["eventTrackerGrouped"][];
    eventResult: {
      event: components["schemas"]["event"];
      events_count: number;
    };
    eventsPage: components["schemas"]["recordsPage"] & {
      data?: components["schemas"]["eventResult"][];
    };
    eventSummary: {
      /** @description user's email or username */
      user_id: string;
      provider: string;
      email: string;
      /** @description First Name */
      first_name: string;
      /** @description Last Name */
      last_name: string;
      activity_count: number;
      login_count: number;
      signup_count: number;
      perf_results_count: number;
      smi_results_count: number;
      meshery_apps_count: number;
      meshery_patterns_count: number;
      meshery_filters_count: number;
      /** Format: data-time */
      last_login_time: string;
    };
    eventSummaryPage: components["schemas"]["recordsPage"] & {
      data?: components["schemas"]["eventSummary"][];
    };
    eventsAggregate: {
      /** @description Number of audit events */
      audit?: number;
      /** @description Number of summary events */
      summary?: number;
    };
    recordsPage: {
      page?: number;
      page_size?: number;
      records_total?: number;
      recordType?: string;
    };
    /** Format: uuid */
    user_uuid: string;
    /** Format: uuid */
    system_id: string;
    /** Format: uuid */
    operation_id: string;
    mesheryFilter: {
      /** @description Connection id */
      id?: components["schemas"]["id"];
      user_id?: components["schemas"]["id"];
      /**
       * Format: byte
       * @description Filter file
       */
      filter_file?: string;
      /** @description Filter Name */
      name?: components["schemas"]["text"];
      location?: components["schemas"]["map_object"];
      visibility?: components["schemas"]["text"];
      catalog_data?: components["schemas"]["map_object"];
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
    };
    mesheryFilterPage: components["schemas"]["resultsPage"] & {
      filters?: components["schemas"]["mesheryFilter"][];
    };
    ImportRequest: {
      importBody: components["schemas"]["ImportBody"];
      uploadType: string;
      register: boolean;
    };
    ImportBody: {
      /**
       * Format: byte
       * @description This represents the binary content of the file as a byte array
       */
      model_file: string;
      url: string;
      file_name: string;
      model_csv: string;
      component_csv: string;
      relationship_csv: string;
      model: components["schemas"]["Model"];
    };
    Model: {
      modelDisplayName: string;
      registrant: string;
      model: string;
      category: components["schemas"]["category"];
      subCategory: components["schemas"]["subcategory"];
      shape: string;
      primaryColor: string;
      secondaryColor: string;
      svgColor: string;
      svgWhite: string;
      svgComplete: string;
      isAnnotation: boolean;
      publishToRegistry: boolean;
    };
    /** @description Category of the model. */
    category: {
      id: components["schemas"]["uuid"];
      /**
       * @description The category of the model that determines the main grouping.
       * @default Uncategorized
       * @enum {string}
       */
      name:
        | "Analytics"
        | "App Definition and Development"
        | "Cloud Native Network"
        | "Cloud Native Storage"
        | "Database"
        | "Machine Learning"
        | "Observability and Analysis"
        | "Orchestration & Management"
        | "Platform"
        | "Provisioning"
        | "Runtime"
        | "Security & Compliance"
        | "Serverless"
        | "Tools"
        | "Uncategorized";
      metadata: { [key: string]: unknown };
    };
    /**
     * SubCategory
     * @description Sub category of the model determines the secondary grouping.
     * @default Uncategorized
     * @enum {string}
     */
    subcategory:
      | "API Gateway"
      | "API Integration"
      | "Application Definition & Image Build"
      | "Automation & Configuration"
      | "Certified Kubernetes - Distribution"
      | "Chaos Engineering"
      | "Cloud Native Storage"
      | "Cloud Provider"
      | "CNI"
      | "Compute"
      | "Container Registry"
      | "Container Runtime"
      | "Container Security"
      | "Container"
      | "Content Delivery Network"
      | "Continuous Integration & Delivery"
      | "Coordination & Service Discovery"
      | "Database"
      | "Flowchart"
      | "Framework"
      | "Installable Platform"
      | "Key Management"
      | "Key Management Service"
      | "Kubernetes"
      | "Logging"
      | "Machine Learning"
      | "Management Governance"
      | "Metrics"
      | "Monitoring"
      | "Networking Content Delivery"
      | "Operating System"
      | "Query"
      | "Remote Procedure Call"
      | "Scheduling & Orchestration"
      | "Secrets Management"
      | "Security Identity & Compliance"
      | "Service Mesh"
      | "Service Proxy"
      | "Source Version Control"
      | "Storage"
      | "Specifications"
      | "Streaming & Messaging"
      | "Tools"
      | "Tracing"
      | "Uncategorized"
      | "Video Conferencing";
    roleHolderRequest: {
      role_names: components["schemas"]["roleNames"];
      email: components["schemas"]["email"];
    };
    role: {
      id: components["schemas"]["id"];
      user_id: components["schemas"]["user_id"];
      username: components["schemas"]["username"];
      email: components["schemas"]["email"];
      /** @description First Name */
      first_name: components["schemas"]["text"];
      /** @description Last Name */
      last_name: components["schemas"]["text"];
      status: components["schemas"]["status"];
      role_names: components["schemas"]["roleNames"];
      created_at: components["schemas"]["time"];
      updated_at: components["schemas"]["time"];
      last_login_time: components["schemas"]["time"];
      deleted_at: components["schemas"]["time"];
      prefs?: components["schemas"]["email_preference"];
    };
    roleNames: string[];
    /**
     * Format: email
     * @description email
     */
    email: string;
    /** @description user's email or username */
    user_id: string;
    username: string;
    status: string;
    email_preference: {
      welcome_email?: boolean;
      notify_role_change?: boolean;
    };
    performanceProfile: {
      id?: components["schemas"]["id"];
      name?: components["schemas"]["text"];
      user_id?: components["schemas"]["id"];
      schedule?: components["schemas"]["id"];
      load_generators?: string;
      endpoints?: string;
      service_mesh?: string;
      concurrent_request?: number;
      qps?: number;
      duration?: string;
      last_run?: components["schemas"]["time"];
      total_results?: number;
      request_headers?: string;
      request_cookies?: string;
      request_body?: string;
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
    };
    performanceProfilePage: components["schemas"]["resultsPage"] & {
      profiles?: components["schemas"]["performanceProfile"][];
    };
    performanceResult: {
      id?: components["schemas"]["id"];
      name?: components["schemas"]["text"];
      test_start_time?: components["schemas"]["time"];
      mesh?: string;
      runner_results?: components["schemas"]["map_object"];
      deleted?: boolean;
      server_metrics?: components["schemas"]["map_object"];
      server_board_config?: components["schemas"]["map_object"];
      performance_profile?: components["schemas"]["id"];
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
    };
    mesheryResultPage: components["schemas"]["resultsPage"] & {
      results?: components["schemas"]["performanceResult"][];
    };
    tokenPage: components["schemas"]["resultsPage"] & {
      tokens?: components["schemas"]["userToken"][];
    };
    userToken: {
      id?: components["schemas"]["id"];
      user_id?: components["schemas"]["id"];
      provider?: components["schemas"]["provider"];
      access_token?: components["schemas"]["text"];
      refresh_token?: components["schemas"]["text"];
      name?: components["schemas"]["text"];
      purpose?: components["schemas"]["text"];
      is_oauth?: boolean;
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
    };
    userInvite: {
      /** @description First Name */
      first_name: components["schemas"]["text"];
      /** @description Last Name */
      last_name: components["schemas"]["text"];
      email: components["schemas"]["email"];
    };
    bulkDelete: {
      user_ids: components["schemas"]["id"];
      user_emails: components["schemas"]["emails"];
    };
    user: {
      id: components["schemas"]["id"];
      user_id: components["schemas"]["user_id"];
      provider: components["schemas"]["provider"];
      email: components["schemas"]["email"];
      /** @description First Name */
      first_name: components["schemas"]["text"];
      /** @description Last Name */
      last_name: components["schemas"]["text"];
      avatar_url?: components["schemas"]["avatar_url"];
      status: components["schemas"]["status"];
      bio?: components["schemas"]["bio"];
      preferences?: components["schemas"]["map_object"];
      accepted_terms_at?: components["schemas"]["accepted_terms_at"];
      first_login_time?: components["schemas"]["time"];
      last_login_time: components["schemas"]["time"];
    } & {
      created_at: unknown;
      updated_at: unknown;
      deleted_at: unknown;
    };
    recentUsers: {
      id?: components["schemas"]["id"];
      /** @description First Name */
      first_name?: components["schemas"]["text"];
      /** @description Last Name */
      last_name?: components["schemas"]["text"];
      avatar_url?: components["schemas"]["avatar_url"];
    };
    rolesPage: components["schemas"]["recordsPage"] & {
      data?: components["schemas"]["role"][];
    };
    key: {
      ID?: components["schemas"]["id"];
      subcategory?: components["schemas"]["text"];
      function?: components["schemas"]["text"];
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
      deleted_at?: components["schemas"]["nullTime"];
      category?: components["schemas"]["text"];
      description?: components["schemas"]["text"];
      owner?: components["schemas"]["id"];
    };
    userKeys: {
      keys?: components["schemas"]["key"][];
      total_count?: number;
    };
    /** @enum {string} */
    deleteOn: "self" | "bulk";
    usersPageForAdmin: components["schemas"]["recordsPage"] & {
      data?: components["schemas"]["usersWithRolesForAdmin"][];
    };
    usersWithRolesForAdmin: {
      id: components["schemas"]["id"];
      user_id: components["schemas"]["user_id"];
      username: components["schemas"]["username"];
      email: components["schemas"]["email"];
      /** @description First Name */
      first_name: components["schemas"]["text"];
      /** @description Last Name */
      last_name: components["schemas"]["text"];
      status: components["schemas"]["status"];
      role_names: components["schemas"]["roleNames"];
      created_at: components["schemas"]["time"];
      updated_at: components["schemas"]["time"];
      last_login_time: components["schemas"]["time"];
      deleted_at: components["schemas"]["time"];
      prefs?: components["schemas"]["email_preference"];
      avatar_url?: components["schemas"]["avatar_url"];
      preferences?: components["schemas"]["map_object"];
    };
    teamMembers: {
      id: components["schemas"]["id"];
      user_id: components["schemas"]["user_id"];
      username: components["schemas"]["username"];
      email: components["schemas"]["email"];
      /** @description First Name */
      first_name: components["schemas"]["text"];
      /** @description Last Name */
      last_name: components["schemas"]["text"];
      status: components["schemas"]["status"];
      role_names: components["schemas"]["roleNames"];
      joined_at: components["schemas"]["time"];
      updated_at: components["schemas"]["time"];
      last_login_time: components["schemas"]["time"];
      deleted_at: components["schemas"]["time"];
      prefs?: components["schemas"]["email_preference"];
      avatar_url?: components["schemas"]["avatar_url"];
    };
    teamMembersPage: components["schemas"]["recordsPage"] & {
      data?: components["schemas"]["teamMembers"][];
    };
    usersForNonAdmin: {
      id: components["schemas"]["id"];
      user_id: components["schemas"]["user_id"];
      username: components["schemas"]["username"];
      email: components["schemas"]["email"];
      /** @description First Name */
      first_name: components["schemas"]["text"];
      /** @description Last Name */
      last_name: components["schemas"]["text"];
      prefs?: components["schemas"]["email_preference"];
      avatar_url?: components["schemas"]["avatar_url"];
      preferences?: components["schemas"]["map_object"];
    };
    usersPageForNonAdmin: components["schemas"]["recordsPage"] & {
      data?: components["schemas"]["usersForNonAdmin"][];
    };
    recentActivityPage: {
      recent_activity?: components["schemas"]["event"][];
    };
    accountOverview: {
      k8s_count?: number;
      app_count?: number;
      pattern_count?: number;
    };
    badge: {
      id?: components["schemas"]["id"];
      name?: components["schemas"]["text"];
      description?: components["schemas"]["text"];
      label?: components["schemas"]["text"];
      svg_location?: components["schemas"]["text"];
      created_at?: components["schemas"]["time"];
      updated_at?: components["schemas"]["time"];
      deleted_at?: components["schemas"]["nullTime"];
    };
    badges: {
      badges?: { [key: string]: components["schemas"]["badge"] };
      total_count?: number;
    };
    /** @description SQL null Timestamp to handle null values of time. */
    nullTime: string;
    /** @description Link for profile picture */
    avatar_url: string;
    bio: string;
    accepted_terms_at: string;
    emails: components["schemas"]["email"][];
    /** @description Body for empty request */
    empty: { [key: string]: unknown };
  };
  responses: {
    /** ok */
    200: {
      content: {
        "text/plain": string;
      };
    };
    /** created */
    201: {
      content: {
        "text/plain": string;
      };
    };
    /** Invalid request body or request param */
    400: {
      content: {
        "text/plain": string;
      };
    };
    /** Expired JWT token used or insufficient privilege */
    401: {
      content: {
        "text/plain": string;
      };
    };
    /** Result not found */
    404: {
      content: {
        "text/plain": string;
      };
    };
    /** Internal server error */
    500: {
      content: {
        "text/plain": string;
      };
    };
  };
  parameters: {
    /** @description user's os */
    os: string;
    /** @description Is playground mode */
    playground: string;
    /** @description meshery version */
    mesheryVersion: string;
    /** @description Connection kind (eg: Meshery) */
    connectionKind: components["schemas"]["text"];
    /** @description Connection ID */
    connectionId: components["schemas"]["id"];
    /** @description Meshery server ID */
    serverId: components["schemas"]["id"];
    /** @description Get reponses by page */
    page: string;
    /** @description Get reponses by pageSize */
    page_size: string;
    /** @description Get responses that match search param value */
    search: string;
    /** @description Get ordered responses */
    order: string;
    /** @description credential Id */
    credentialId: string;
    /** @description Cumulative events */
    cumulative: string;
    /** @description Filter for retrieving events */
    eventsFilter: {
      provider?: string[];
      event_type?: string[];
    };
    /** @description Unique identifier */
    id: string;
    /** @description Result id */
    resultId: components["schemas"]["id"];
    /** @description Performance Result Id */
    resultID: string;
    /** @description To get OAuth tokens as well */
    isOAuth: string;
    /** @description Name of the resource */
    name: string;
    /** @description Purpose for which token is generated */
    purpose: string;
    /** @description User's user_id */
    userId: string;
    /** @description Remote provider */
    provider: string;
    /** @description Defines on whom the delete operation is to be performed */
    deleteOn: components["schemas"]["deleteOn"];
    /** @description Get filtered reponses */
    filter: string;
  };
  requestBodies: {
    connectionPayload: {
      content: {
        "application/json": {
          /** @description Kind */
          kind?: components["schemas"]["text"];
          /** @description Connection type */
          type?: components["schemas"]["text"];
          /** @description Connection subtype */
          sub_type?: components["schemas"]["text"];
          credential_secret?: components["schemas"]["map_object"];
          metadata?: components["schemas"]["map_object"];
        };
      };
    };
    /** Body for user credential */
    credentialBody: {
      content: {
        "application/json": components["schemas"]["credential"];
      };
    };
    mesheryFilterRequestBody: {
      content: {
        "application/json": {
          url?: components["schemas"]["text"];
          path?: components["schemas"]["text"];
          save?: boolean;
          filter_data?: components["schemas"]["mesheryFilter"];
        };
      };
    };
    /** Body for user invite request */
    userInvite: {
      content: {
        "application/json": {
          /** @description First Name */
          first_name: components["schemas"]["text"];
          /** @description Last Name */
          last_name: components["schemas"]["text"];
          email: components["schemas"]["email"];
        };
      };
    };
    /** Body for delete of user accounts */
    deleteUsers: {
      content: {
        "application/json":
          | components["schemas"]["bulkDelete"]
          | components["schemas"]["empty"];
      };
    };
    /** Body for upserting user */
    user: {
      content: {
        "application/json": components["schemas"]["user"];
      };
    };
  };
}

export interface operations {
  /** Get available capabilities for logged in user */
  GetCapabilitie: {
    parameters: {
      query: {
        /** user's os */
        os?: components["parameters"]["os"];
        /** Is playground mode */
        playground?: components["parameters"]["playground"];
      };
    };
    responses: {
      /** capabilities */
      200: {
        content: {
          "application/json": components["schemas"]["capability"];
        };
      };
      500: components["responses"]["500"];
    };
  };
  /** Get available capabilities for logged in user */
  GetCapabilities: {
    parameters: {
      path: {
        /** meshery version */
        "meshery-version": components["parameters"]["mesheryVersion"];
      };
      query: {
        /** user's os */
        os?: components["parameters"]["os"];
        /** Is playground mode */
        playground?: components["parameters"]["playground"];
      };
    };
    responses: {
      /** capabilities */
      200: {
        content: {
          "application/json": components["schemas"]["capability"];
        };
      };
      500: components["responses"]["500"];
    };
  };
  /** Collaboration */
  CollaborationHandler: {
    responses: {
      /** initate cross server collaboration */
      101: unknown;
    };
  };
  /** Get connections */
  GetConnections: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Paginated list of connections */
      200: {
        content: {
          "application/json": components["schemas"]["connectionPage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Register with Meshery Cloud */
  RegisterConnection: {
    responses: {
      /** Inserted connection */
      200: {
        content: {
          "application/json": components["schemas"]["connection"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["connectionPayload"];
  };
  /** Edit registered connection using the connection ID */
  EditConnectionByID: {
    parameters: {
      path: {
        /** Connection ID */
        connectionId: components["parameters"]["connectionId"];
      };
    };
    responses: {
      /** Edited connection */
      200: {
        content: {
          "application/json": components["schemas"]["connection"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["connectionPayload"];
  };
  /** Get summary about the status of all connections */
  GetConnectionStatus: {
    responses: {
      /** Status of connections */
      200: {
        content: {
          "application/json": components["schemas"]["connectionsStatusPage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get connections by kind */
  GetConnectionsByKind: {
    parameters: {
      path: {
        /** Connection kind (eg: Meshery) */
        connectionKind: components["parameters"]["connectionKind"];
      };
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Connections by kind */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Delete registered connection */
  DeleteConnection: {
    parameters: {
      path: {
        /** Connection kind (eg: Meshery) */
        connectionKind: components["parameters"]["connectionKind"];
      };
    };
    responses: {
      /** Deleted connection */
      200: {
        content: {
          "application/json": components["schemas"]["connection"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get connections by kind (kind is required because this API returns the results in non std format of a connection) */
  GetConnectionsByKindAndConnectionID: {
    parameters: {
      path: {
        /** Connection kind (eg: Meshery) */
        connectionKind: components["parameters"]["connectionKind"];
        /** Connection ID */
        connectionId: components["parameters"]["connectionId"];
      };
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Connections by kind */
      200: {
        content: {
          "application/json": components["schemas"]["k8sContextPersistResponse"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Deletes a given meshery connection. This is generally used for deleting connections from Meshery Server UI where UI is not aware of connection IDs. */
  DeleteMesheryConnection: {
    parameters: {
      path: {
        /** Meshery server ID */
        mesheryServerID: components["parameters"]["serverId"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get all user's credentials for logged in user */
  GetUserCredentials: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** credentials */
      200: {
        content: {
          "application/json": components["schemas"]["credentialsPage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Update credentials for logged in user */
  UpdateUserCredential: {
    responses: {
      200: components["responses"]["200"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["credentialBody"];
  };
  /** Create new credentials for logged in user */
  SaveUserCredential: {
    responses: {
      201: components["responses"]["201"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["credentialBody"];
  };
  /** Delete user's credentials (tombstoned records) for logged in user */
  DeleteUserCredential: {
    parameters: {
      query: {
        /** credential Id */
        credential_id: components["parameters"]["credentialId"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get Events Aggreate Count */
  GetEventsAggregate: {
    parameters: {
      query: {
        /** Cumulative events */
        cumulative?: components["parameters"]["cumulative"];
      };
    };
    responses: {
      /** Events Aggregate Count */
      200: {
        content: {
          "application/json": components["schemas"]["eventsAggregate"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get Events by date */
  RetrieveResultsByDate: {
    parameters: {
      query: {
        /** Cumulative events */
        cumulative?: components["parameters"]["cumulative"];
      };
    };
    responses: {
      /** Events by date */
      200: {
        content: {
          "application/json": components["schemas"]["eventTrackerGroupedArray"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get Events by week */
  RetrieveResultsByWeek: {
    parameters: {
      query: {
        /** Cumulative events */
        cumulative?: components["parameters"]["cumulative"];
      };
    };
    responses: {
      /** Events by week */
      200: {
        content: {
          "application/json": components["schemas"]["eventTrackerGroupedArray"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get Events by month */
  RetrieveResultsByMonth: {
    parameters: {
      query: {
        /** Cumulative events */
        cumulative?: components["parameters"]["cumulative"];
      };
    };
    responses: {
      /** Events by month */
      200: {
        content: {
          "application/json": components["schemas"]["eventTrackerGroupedArray"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get All events */
  GetEvents: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
        /** Filter for retrieving events */
        filter?: components["parameters"]["eventsFilter"];
      };
    };
    responses: {
      /** Events list */
      200: {
        content: {
          "application/json": components["schemas"]["eventsPage"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get Events summary for a user */
  GetEventSummaryByUser: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Events Summary */
      200: {
        content: {
          "application/json": components["schemas"]["eventSummaryPage"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get paginated filters */
  GetFilters: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Filters */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryFilterPage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** It will insert the filter if not present else it will update the matching entry */
  UpsertFilter: {
    responses: {
      /** Upserted filter */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryFilter"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["mesheryFilterRequestBody"];
  };
  /** Get the filter associated with the given filter id without any metadata */
  GetFilterFile: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Filter file */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryFilter"]["filter_file"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get filter by ID */
  GetFilter: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Filter associated with ID */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryFilter"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Delete filter associated with ID */
  DeleteFilter: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Deleted filter */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryFilter"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Clone filter associated with ID */
  CloneFilter: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
    /** Body for cloning design */
    requestBody: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
  };
  RegisterMeshmodels: {
    responses: {
      /** Successful registration */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      /** Invalid request format */
      400: unknown;
      /** Internal server error */
      500: unknown;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ImportRequest"];
      };
    };
  };
  ExportModel: {
    parameters: {
      query: {
        id: string;
        name?: string;
        version?: string;
        output_format?: "json" | "yaml" | "oci";
        file_type?: "oci" | "tar" | "gzip";
      };
    };
    responses: {
      /** Successful export */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** Invalid request format */
      400: unknown;
      /** Internal server error */
      500: unknown;
    };
  };
  /** Get All supported roles */
  GetAllRoles: {
    responses: {
      /** Get all roles */
      200: {
        content: {
          "application/json": string[];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Assign role to user */
  AddRoleHolder: {
    responses: {
      200: components["responses"]["200"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    /** Body for assigning role to the user */
    requestBody: {
      content: {
        "application/json": components["schemas"]["roleHolderRequest"];
      };
    };
  };
  /** Edit role of user */
  EditRoleHolder: {
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    /** Body for editing role of the user */
    requestBody: {
      content: {
        "application/json": components["schemas"]["role"];
      };
    };
  };
  /** Edit roles of user in bulk */
  BulkEditRoleHolder: {
    responses: {
      201: components["responses"]["201"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    /** Body for editing role of the users in bulk */
    requestBody: {
      content: {
        "application/json": components["schemas"]["role"][];
      };
    };
  };
  /** Edit roles of user in bulk */
  DeleteRole: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Deleted roles */
      201: {
        content: {
          "application/json": components["schemas"]["role"][];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get Performance Profiles for SMP Dashboard */
  SMPDashboardPerfProfiles: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Get Performance Profiles with pagination */
      200: {
        content: {
          "application/json": components["schemas"]["performanceProfilePage"];
        };
      };
      500: components["responses"]["500"];
    };
  };
  /** Get Performance Profiles results by ID for SMP Dashboard */
  SMPDashboardTestResults: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Get Performance Profiles Results with pagination */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryResultPage"];
        };
      };
      500: components["responses"]["500"];
      /** Invalid path parameter "id" */
      502: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
  /** Get performance profiles */
  GetPerformanceProfiles: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Performance Profiles */
      200: {
        content: {
          "application/json": components["schemas"]["performanceProfilePage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Update performance profiles or create a new performance profile if no id is provided */
  UpsertPerformanceProfile: {
    responses: {
      /** updated performance profile */
      201: {
        content: {
          "application/json": components["schemas"]["performanceProfile"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    /** Body for upserting performance profile */
    requestBody: {
      content: {
        "application/json": components["schemas"]["performanceProfile"];
      };
    };
  };
  /** Get Performance Profile by ID */
  GetPerformanceProfile: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Performance Profile for provided performance profile id */
      200: {
        content: {
          "application/json": components["schemas"]["performanceProfile"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Delete performance profiles by ID */
  DeletePerformanceProfile: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Deleted Performance Profile */
      200: {
        content: {
          "application/json": components["schemas"]["performanceProfile"];
        };
      };
      401: components["responses"]["401"];
      404: components["responses"]["404"];
      500: components["responses"]["500"];
    };
  };
  /** Get paginated Performance Profiles result */
  GetPerformanceProfileResults: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** Performance Profile results */
      200: {
        content: {
          "application/json": components["schemas"]["mesheryResultPage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Add performance profile result in given performance profile id */
  AddPerformanceProfileResult: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Performance Profile results */
      201: {
        content: {
          "application/json": {
            /** Format: uuid */
            id?: string;
          };
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    /** Body for adding perfor mance profile result */
    requestBody: {
      content: {
        "application/json": components["schemas"]["performanceResult"];
      };
    };
  };
  /** Get the performance test result associated with the given profile id and with the given test id */
  GetPerformanceProfileResult: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
        /** Performance Result Id */
        resultID: components["parameters"]["resultID"];
      };
    };
    responses: {
      /** Performance Profile results */
      200: {
        content: {
          "application/json": components["schemas"]["performanceResult"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get tokens associated with logged in user */
  GetUserTokens: {
    parameters: {
      query: {
        /** To get OAuth tokens as well */
        isOAuth?: components["parameters"]["isOAuth"];
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** user tokens */
      200: {
        content: {
          "application/json": components["schemas"]["tokenPage"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Generates infinite token (i.e. tokens that do not expire) for the logged in user. */
  GenerateToken: {
    parameters: {
      query: {
        /** Name of the resource */
        name?: components["parameters"]["name"];
        /** Purpose for which token is generated */
        purpose?: components["parameters"]["purpose"];
      };
    };
    responses: {
      /** generated token */
      200: {
        content: {
          "text/plain": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Delete token for logged in user */
  DeleteUserTokens: {
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["map_object"];
      };
    };
  };
  /** Get Infinite Token */
  IssueIndefiniteLifetimeToken: {
    parameters: {
      path: {
        /** User's user_id */
        user_id: components["parameters"]["userId"];
      };
      query: {
        /** Remote provider */
        provider: components["parameters"]["provider"];
      };
    };
    responses: {
      /** generated token */
      200: {
        content: {
          "text/plain": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Send invitation request to users */
  HandleUserInvite: {
    responses: {
      /** Invitation sent */
      200: components["responses"]["200"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["userInvite"];
  };
  /** Upsert user preferences */
  UpdateUserPreference: {
    responses: {
      /** Preferences updated */
      201: components["responses"]["201"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    /** Body for upserting user preferences */
    requestBody: {
      content: {
        "application/json": components["schemas"]["map_object"];
      };
    };
  };
  /** Get all keys based on roles assigned to user */
  GetUserKeys: {
    responses: {
      /** Returns user keys based on roles assigned to user */
      200: {
        content: {
          "application/json": components["schemas"]["userKeys"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get specific user by user id */
  GetUserById: {
    parameters: {
      path: {
        /** User's user_id */
        user_id: components["parameters"]["userId"];
      };
    };
    responses: {
      /** Returns user with given user_id */
      200: {
        content: {
          "application/json": components["schemas"]["user"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Delete users based on delete_for parameter */
  DeleteUsers: {
    parameters: {
      path: {
        /** Defines on whom the delete operation is to be performed */
        delete_on: components["parameters"]["deleteOn"];
      };
    };
    responses: {
      201: components["responses"]["201"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["deleteUsers"];
  };
  /** Delete account by ID */
  DeleteUserAccountById: {
    parameters: {
      path: {
        /** User's user_id */
        user_id: components["parameters"]["userId"];
      };
    };
    responses: {
      201: components["responses"]["201"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get All users */
  GetRoleHolders: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
        /** Get filtered reponses */
        filter?: components["parameters"]["filter"];
      };
    };
    responses: {
      /** Get all user with pagination */
      200: {
        content: {
          "application/json": Partial<
            components["schemas"]["usersPageForAdmin"]
          > &
            Partial<components["schemas"]["teamMembersPage"]>;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get All users */
  GetUsers: {
    parameters: {
      query: {
        /** Get reponses by page */
        page?: components["parameters"]["page"];
        /** Get reponses by pageSize */
        page_size?: components["parameters"]["page_size"];
        /** Get responses that match search param value */
        search?: components["parameters"]["search"];
        /** Get ordered responses */
        order?: components["parameters"]["order"];
        /** Get filtered reponses */
        filter?: components["parameters"]["filter"];
      };
    };
    responses: {
      /** Get all user with pagination */
      200: {
        content: {
          "application/json": components["schemas"]["usersPageForNonAdmin"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get user profile of given user Id */
  GetUserProfileById: {
    parameters: {
      path: {
        /** Unique identifier */
        id: components["parameters"]["id"];
      };
    };
    responses: {
      /** Returns user with given id */
      200: {
        content: {
          "application/json": components["schemas"]["user"];
        };
      };
      400: components["responses"]["400"];
      500: components["responses"]["500"];
    };
  };
  /** Get user details for logged in user */
  GetUser: {
    responses: {
      /** user details */
      200: {
        content: {
          "application/json": components["schemas"]["user"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Update user profile data (also updates kratos identity) */
  UpdateProfile: {
    responses: {
      201: components["responses"]["201"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
    requestBody: components["requestBodies"]["user"];
  };
  /** Get Profile overview for logged in user */
  GetProfileOverview: {
    responses: {
      /** user account overview */
      200: {
        content: {
          "application/json": components["schemas"]["accountOverview"];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Get last 10 user activities */
  GetUserActivity: {
    parameters: {
      path: {
        /** UUID of User */
        user_id: string;
      };
    };
    responses: {
      /** user activity */
      200: {
        content: {
          "application/json": components["schemas"]["recentActivityPage"];
        };
      };
      500: components["responses"]["500"];
    };
  };
  /** Get info of active / online users in last 24 hours */
  GetRecentlyOnlineUsers: {
    responses: {
      /** active users */
      200: {
        content: {
          "application/json": components["schemas"]["recentUsers"][];
        };
      };
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
  /** Gets available badges */
  GetAvailableBadges: {
    responses: {
      /** Badges */
      200: {
        content: {
          "application/json": components["schemas"]["badges"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      500: components["responses"]["500"];
    };
  };
}

export interface external {}
